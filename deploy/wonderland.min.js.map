{
  "version": 3,
  "sources": ["api/src/index.ts", "api/node_modules/wasm-feature-detect/dist/esm/index.js", "api/src/wonderland.ts"],
  "sourcesContent": ["import {simd, threads} from 'wasm-feature-detect';\n\nexport * from './wonderland.js';\n\n/**\n * Finds whether simd & threading are supported or not.\n *\n * @returns An object containing boolean for simd and thread.\n */\nasync function detectFeatures(): Promise<{\n    simdSupported: boolean;\n    threadsSupported: boolean;\n}> {\n    let [simdSupported, threadsSupported] = await Promise.all([simd(), threads()]);\n    if (simdSupported) {\n        console.log('WASM SIMD is supported');\n    } else {\n        console.warn('WASM SIMD is not supported');\n    }\n    if (threadsSupported) {\n        if (self.crossOriginIsolated) {\n            console.log('WASM Threads is supported');\n        } else {\n            console.warn(\n                'WASM Threads is supported, but the page is not crossOriginIsolated, therefore thread support is disabled.'\n            );\n        }\n    } else {\n        console.warn('WASM Threads is not supported');\n    }\n\n    threadsSupported = threadsSupported && self.crossOriginIsolated;\n    return {\n        simdSupported,\n        threadsSupported,\n    };\n}\n\n/**\n * Options to forward to {@link loadRuntime}\n */\nexport interface LoadRuntimeOptions {\n    /**\n     * If `true`, forces the runtime to load the SIMD-compatible version.\n     * If `undefined`, performs browser feature detection to check whether SIMD is supported or not.\n     */\n    simd: boolean;\n    /**\n     * If `true`, forces the runtime to load the threads-compatible version.\n     * If `undefined`, performs browser feature detection to check whether threads are supported or not.\n     */\n    threads: boolean;\n    /**\n     * If `true`, forces the runtime to load a physx-compatible version.\n     *\n     * **Note**: If your scene uses physx, you **must** enable this option.\n     */\n    physx: boolean;\n    /**\n     * If `true`, forces the runtime to load a loader-compatible version.\n     *\n     * This option allows to load gltf data at runtime.\n     */\n    loader: boolean;\n}\n\n/**\n * Load the runtime using the WASM and JS files.\n *\n * @param runtime The runtime base string, e.g,: `WonderlandRuntime-loader-physx`.\n * @param options Options to modify the loading behaviour.\n *\n * @returns A promise that resolves when the engine is ready to be used.\n */\nexport async function loadRuntime(\n    runtime: string,\n    options: Partial<LoadRuntimeOptions> = {}\n): Promise<void> {\n    const {simdSupported, threadsSupported} = await detectFeatures();\n    const {\n        simd = simdSupported,\n        threads = threadsSupported,\n        physx = false,\n        loader = false,\n    } = options;\n\n    const filename = `${runtime}${loader ? '-loader' : ''}${physx ? '-physx' : ''}${\n        simd ? '-simd' : ''\n    }${threads ? '-threads' : ''}`;\n    const r = await fetch(filename + '.wasm');\n    if (!r.ok) {\n        return Promise.reject('Failed to fetch runtime .wasm file');\n    }\n    const wasm = await r.arrayBuffer();\n    return new Promise((res: () => void, rej: (reason: string) => void) => {\n        window.Module = {\n            worker: `${filename}.worker.js`,\n            wasm,\n        };\n        window.Module.ready = function () {\n            window._wl_application_start();\n            res();\n        };\n        const s = document.createElement('script');\n        s.type = 'text/javascript';\n        s.src = `${filename}.js`;\n        s.onerror = function () {\n            rej('Failed to fetch runtime .js file');\n        };\n        document.body.append(s);\n    });\n}\n", "export const bigInt=()=>(async e=>{try{return(await WebAssembly.instantiate(e)).instance.exports.b(BigInt(0))===BigInt(0)}catch(e){return!1}})(new Uint8Array([0,97,115,109,1,0,0,0,1,6,1,96,1,126,1,126,3,2,1,0,7,5,1,1,98,0,0,10,6,1,4,0,32,0,11])),bulkMemory=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,3,1,0,1,10,14,1,12,0,65,0,65,0,65,0,252,10,0,0,11])),exceptions=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,8,1,6,0,6,64,25,11,11])),extendedConst=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,5,3,1,0,1,11,9,1,0,65,1,65,2,106,11,0])),memory64=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,5,3,1,4,1])),multiValue=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,6,1,96,0,2,127,127,3,2,1,0,10,8,1,6,0,65,0,65,0,11])),mutableGlobals=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,2,8,1,1,97,1,98,3,127,1,6,6,1,127,1,65,0,11,7,5,1,1,97,3,1])),referenceTypes=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,7,1,5,0,208,112,26,11])),saturatedFloatToInt=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,12,1,10,0,67,0,0,0,0,252,0,26,11])),signExtensions=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,8,1,6,0,65,0,192,26,11])),simd=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,10,1,8,0,65,0,253,15,253,98,11])),streamingCompilation=()=>(async()=>\"compileStreaming\"in WebAssembly)(),tailCall=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,6,1,4,0,18,0,11])),threads=()=>(async e=>{try{return\"undefined\"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(e)}catch(e){return!1}})(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11]));\n", "/**\n * Types\n */\n\n/**\n * Represents any object that can be used as an array for read / write.\n */\nexport interface NumberArray {\n    length: number;\n    [n: number]: number;\n}\n\n/**\n * Type to describe a constructor.\n */\nexport type Constructor<T = any> = {\n    new (...args: any[]): T;\n};\n\n/**\n * Component constructor type.\n */\nexport type ComponentConstructor<T extends Component = Component> = Constructor<T> & {\n    TypeName: string;\n    Properties: Record<string, CustomParameter>;\n};\n\n/**\n * Component prototype interface.\n *\n * User component's should have the same structure.\n */\nexport interface ComponentProto {\n    /**\n     * Triggered after the component instantiation.\n     * For more information, please have a look at {@link Component.init}.\n     */\n    init?: () => void;\n    /**\n     * Triggered after the component is activated for the first time.\n     * For more information, please have a look at {@link Component.start}.\n     */\n    start?: () => void;\n    /**\n     * Triggered once per frame.\n     * For more information, please have a look at {@link Component.update}.\n     *\n     * @param dt Delta time, time since last update.\n     */\n    update?: (dt: number) => void;\n    /**\n     * Triggered when the component goes from deactivated to activated.\n     * For more information, please have a look at {@link Component.onActivate}.\n     */\n    onActivate?: () => void;\n    /**\n     * Triggered when the component goes from activated to deactivated.\n     * For more information, please have a look at {@link Component.onDeactivate}.\n     */\n    onDeactivate?: () => void;\n    /**\n     * Triggered when the component is removed from its object.\n     * For more information, please have a look at {@link Component.onDestroy}.\n     *\n     * @since 0.9.0\n     */\n    onDestroy?: () => void;\n}\n\n/**\n * Callback triggered when the session starts.\n *\n * @param session The session that started\n */\nexport type XrSessionStartCallback = (session: XRSession) => void;\n\n/**\n * Callback triggered for supported / unsupported session.\n *\n * @param type Type of session which is supported/not supported. Either `\"vr\"` or `\"ar\"`.\n * @param supported Whether given session type is supported.\n */\nexport type XrSupportCallback = (type: string, supported: boolean) => void;\n\n/**\n * Callback triggered when the scene is loaded.\n */\nexport type SceneLoadedCallback = () => void;\n\nexport interface GLTFExtensions {\n    root: Record<string, any>;\n    mesh: Record<string, any>;\n    node: Record<string, any>;\n    idMapping: Record<string, any>;\n}\n\n/**\n * Result obtained when loading a scene.\n */\nexport type SceneAppendResult =\n    | $Object\n    | {\n          root: $Object;\n          extensions: Record<string, any>;\n      };\n\n/**\n * Callback triggered on collision event.\n *\n * @param type Type of the event.\n * @param other Other component that was (un)collided with\n */\nexport type CollisionCallback = (type: CollisionEventType, other: PhysXComponent) => void;\n\nconst MISALIGNED_MSG = 'Misaligned pointer: please report a bug';\n/* Component class instances per type to avoid GC */\nlet ComponentCache: Record<string, Component[]> = {};\n/* Object class instances per type to avoid GC */\nlet ObjectCache: $Object[] = [];\n/* Component properties to exclude when cloning, see addComponent() */\nconst EXCLUDED_COMPONENT_PROPERTIES = ['_id', '_manager', 'type', '_type', 'active'];\n\n/**\n * Wonderland Engine API\n * @namespace WL\n */\n\n/**\n * Component parameter type enum\n */\nexport enum Type {\n    /**\n     * **Bool**:\n     *\n     * Appears in the editor as checkbox.\n     */\n    Bool = 1 << 1,\n\n    /**\n     * **Int**:\n     *\n     * Appears in the editor as int input field.\n     */\n    Int = 1 << 2,\n\n    /**\n     * **Float**:\n     *\n     * Appears in the editor as float input field.\n     */\n    Float = 1 << 3,\n\n    /**\n     * **String / Text**:\n     *\n     * Appears in the editor as text input field.\n     */\n    String = 1 << 4,\n\n    /**\n     * **Enumeration**:\n     *\n     * Appears in the editor as dropdown with given values.\n     * If parameters is enum, a `values` parameter needs to be\n     * specified for the parameter as well.\n     *\n     * @example\n     *     camera: {type: Type.Enum, values: ['auto', 'back', 'front'], default: 'auto'},\n     */\n    Enum = 1 << 5,\n\n    /**\n     * **Object reference**:\n     *\n     * Appears in the editor as object resource selection dropdown\n     * with object picker.\n     */\n    Object = 1 << 6,\n\n    /**\n     * **Mesh reference**:\n     *\n     * Appears in the editor as mesh resource selection dropdown.\n     */\n    Mesh = 1 << 7,\n\n    /**\n     * **Texture reference**:\n     *\n     * Appears in the editor as texture resource selection dropdown.\n     */\n    Texture = 1 << 8,\n\n    /**\n     * **Material reference**:\n     *\n     * Appears in the editor as material resource selection dropdown.\n     */\n    Material = 1 << 9,\n\n    /**\n     * **Animation reference**:\n     *\n     * Appears in the editor as animation resource selection dropdown.\n     */\n    Animation = 1 << 10,\n\n    /**\n     * **Skin reference**:\n     *\n     * Appears in the editor as skin resource selection dropdown.\n     */\n    Skin = 1 << 11,\n}\n\n/**\n * Default component parameter value per type.\n */\nconst _componentDefaults = new Array(6);\n_componentDefaults[Type.Bool] = false;\n_componentDefaults[Type.Int] = 0;\n_componentDefaults[Type.Float] = 0.0;\n_componentDefaults[Type.String] = '';\n_componentDefaults[Type.Enum] = 0;\n_componentDefaults[Type.Object] = null;\n_componentDefaults[Type.Mesh] = null;\n_componentDefaults[Type.Texture] = null;\n_componentDefaults[Type.Material] = null;\n_componentDefaults[Type.Animation] = null;\n_componentDefaults[Type.Skin] = null;\n\n/**\n * Setup the defaults value of the properties on a given\n * component class.\n *\n * @param ctor The component class\n */\nfunction _setupDefaults(ctor: ComponentConstructor) {\n    for (const name in ctor.Properties) {\n        const p = ctor.Properties[name];\n        p.default = p.default || _componentDefaults[p.type];\n        ctor.prototype[name] = p.default;\n    }\n}\n\n/**\n * Custom component parameter.\n *\n * For more information about component properties, have a look\n * at the {@link Component.Properties} attribute.\n */\nexport interface CustomParameter {\n    /** Parameter type. */\n    type: Type;\n    /** Default value, depending on type. */\n    default?: any;\n    /** Values for {@link Type} */\n    values?: string[];\n}\n\n/**\n * Register a custom JavaScript component type.\n *\n * ```js\n * registerComponent('my-new-type', {\n *    myParam: {type: Type.Float, default: 42.0},\n * }, {\n *    init: function() {},\n *    start: function() {},\n *    update: function(dt) {},\n *    onActivate: function() {},\n *    onDeactivate: function() {},\n *    onDestroy: function() {},\n * });\n * ```\n *\n * @param name Name of the component.\n * @param params Dict of param names to {@link CustomParameter}.\n * @param object Object containing functions for the component type.\n * @deprecated Use {@link registerComponent:CLASSES} instead.\n */\nexport function registerComponent(\n    name: string,\n    params: {[key: string]: CustomParameter},\n    object: ComponentProto\n): void;\n\n/**\n * Register a custom JavaScript component type.\n *\n * You can register a component directly using a class inheriting from {@link Component}:\n *\n * ```js\n * import { Component, Type } from '@wonderlandengine/api';\n *\n * export class MyComponent extends Component {\n *     static TypeName = 'my-component';\n *     static Properties = {\n *         myParam: {type: Type.Float, default: 42.0},\n *     };\n *     init() {}\n *     start() {}\n *     update(dt) {}\n *     onActivate() {}\n *     onDeactivate() {}\n *     onDestroy() {}\n * });\n *\n * registerComponent(MyComponent);\n * ```\n *\n * {@label CLASSES}\n * @param classes Custom component(s) extending {@link Component}.\n */\nexport function registerComponent(...classes: ComponentConstructor[]): void;\n\n/** @overload */\nexport function registerComponent(...args: unknown[]): void {\n    if (_WL.isString(args[0])) {\n        /* Registration is using `name`, `params`, and `object`. */\n        const typeIndex = _WL.registerComponent(\n            args[0] as string,\n            args[1] as {[key: string]: CustomParameter},\n            args[2] as ComponentProto\n        );\n        const ctor = _WL._componentTypes[typeIndex] as ComponentConstructor<Component>;\n        _setupDefaults(ctor);\n        return;\n    }\n    for (const arg of args) {\n        const typeIndex = _WL.registerComponent(arg as Constructor);\n        const ctor = _WL._componentTypes[typeIndex] as ComponentConstructor<Component>;\n        _setupDefaults(ctor);\n    }\n}\n\n/**\n * Collider type enum for {@link CollisionComponent}.\n */\nexport enum Collider {\n    /**\n     * **Sphere Collider**:\n     *\n     * Simplest and most performant collision shape. If this type is set on a\n     * {@link CollisionComponent}, only the first component of\n     * {@link CollisionComponent#extents} will be used to determine the radius.\n     */\n    Sphere = 0,\n\n    /**\n     * **Axis Aligned Bounding Box Collider**:\n     *\n     * Box that is always aligned to XYZ axis. It cannot be rotated but is more\n     * efficient than {@link Collider.Box}.\n     */\n    AxisAlignedBox = 1,\n\n    /**\n     * **Aligned Bounding Box Collider**:\n     *\n     * Box that matches the object's rotation and translation correctly. This\n     * is the least efficient collider and should only be chosen over\n     * {@link Collider.Sphere} and {@link Collider.AxisAlignedBox} if really\n     * necessary.\n     */\n    Box = 2,\n}\n\n/**\n * Alignment type enum for {@link TextComponent}.\n */\nexport enum Alignment {\n    /** Text start is at object origin */\n    Left = 1,\n\n    /** Text center is at object origin */\n    Center = 2,\n\n    /** Text end is at object origin */\n    Right = 3,\n}\n\n/**\n * Justification type enum for {@link TextComponent}.\n */\nexport enum Justification {\n    /** Text line is at object origin */\n    Line = 1,\n\n    /** Text middle is at object origin */\n    Middle = 2,\n\n    /** Text top is at object origin */\n    Top = 3,\n\n    /** Text bottom is at object origin */\n    Bottom = 4,\n}\n\n/**\n * Effect type enum for {@link TextComponent}.\n */\nexport enum TextEffect {\n    /** Text is rendered normally */\n    None = 0,\n\n    /** Text is rendered with an outline */\n    Outline = 1,\n}\n\n/**\n * Input type enum for {@link InputComponent}.\n */\nexport enum InputType {\n    /** Head input */\n    Head = 0,\n\n    /** Left eye input */\n    EyeLeft = 1,\n\n    /** Right eye input */\n    EyeRight = 2,\n\n    /** Left controller input */\n    ControllerLeft = 3,\n\n    /** Right controller input */\n    ControllerRight = 4,\n\n    /** Left ray input */\n    RayLeft = 5,\n\n    /** Right ray input */\n    RayRight = 6,\n}\n\n/**\n * Light type enum for {@link LightComponent}.\n */\nexport enum LightType {\n    /** Point light */\n    Point = 1,\n\n    /** Spot light */\n    Spot = 2,\n\n    /** Sun light / Directional light */\n    Sun = 3,\n}\n\n/**\n * Animation state of {@link AnimationComponent}.\n */\nexport enum AnimationState {\n    /** Animation is currently playing */\n    Playing = 1,\n\n    /** Animation is paused and will continue at current playback\n     * time on {@link AnimationComponent#play} */\n    Paused = 2,\n\n    /** Animation is stopped */\n    Stopped = 3,\n}\n\n/**\n * Rigid body force mode for {@link PhysXComponent#addForce} and {@link PhysXComponent#addTorque}.\n *\n * [PhysX API Reference](https://gameworksdocs.nvidia.com/PhysX/4.1/documentation/physxapi/files/structPxForceMode.html)\n */\nexport enum ForceMode {\n    /** Apply as force */\n    Force = 0,\n\n    /** Apply as impulse */\n    Impulse = 1,\n\n    /** Apply as velocity change, mass dependent */\n    VelocityChange = 2,\n\n    /** Apply as mass dependent force */\n    Acceleration = 3,\n}\n\n/**\n * Collision callback event type.\n */\nexport enum CollisionEventType {\n    /** Touch/contact detected, collision */\n    Touch = 0,\n\n    /** Touch/contact lost, uncollide */\n    TouchLost = 1,\n\n    /** Touch/contact with trigger detected */\n    TriggerTouch = 2,\n\n    /** Touch/contact with trigger lost */\n    TriggerTouchLost = 3,\n}\n\n/**\n * Rigid body {@link PhysXComponent#shape}.\n *\n * [PhysX SDK Guide](https://gameworksdocs.nvidia.com/PhysX/4.1/documentation/physxguide/Manual/Geometry.html#geometry-types).\n */\nexport enum Shape {\n    /** No shape. */\n    None = 0,\n\n    /** Sphere shape. */\n    Sphere = 1,\n\n    /** Capsule shape. */\n    Capsule = 2,\n\n    /** Box shape. */\n    Box = 3,\n\n    /** Plane shape. */\n    Plane = 4,\n\n    /** Convex mesh shape. */\n    ConvexMesh = 5,\n\n    /** Triangle mesh shape. */\n    TriangleMesh = 6,\n}\n\n/**\n * Mesh attribute enum.\n * @since 0.9.0\n */\nexport enum MeshAttribute {\n    /** Position attribute, 3 floats */\n    Position = 0,\n\n    /** Tangent attribute, 4 floats */\n    Tangent = 1,\n\n    /** Normal attribute, 3 floats */\n    Normal = 2,\n\n    /** Texture coordinate attribute, 2 floats */\n    TextureCoordinate = 3,\n\n    /** Color attribute, 4 floats, RGBA, range `0` to `1` */\n    Color = 4,\n\n    /** Joint id attribute, 8 unsigned ints */\n    JointId = 5,\n\n    /** Joint weights attribute, 8 floats */\n    JointWeight = 6,\n\n    /** @deprecated Deprecated, Secondary joint id attribute, should use JointId which has all 8 values instead */\n    SecondaryJointId = 7,\n\n    /** @deprecated Deprecated, Secondary joint weights attribute, should use JointWeight which has all 8 values instead */\n    SecondaryJointWeight = 8,\n}\n\n/**\n * Material parameter type.\n */\nexport enum MaterialParamType {\n    /** Unsigned integer parameter type. */\n    UnsignedInt = 0,\n    /** Integer parameter type. */\n    Int = 1,\n    /** Float parameter type. */\n    Float = 2,\n    /** Sampler resource parameter type, i.e., a {@link Texture}. */\n    Sampler = 3,\n    /**\n     * Font resource parameter type.\n     *\n     * **Note**: Changing font isn't exposed yet and will raise an error.\n     */\n    Font = 4,\n}\n\n/**\n * Canvas element that Wonderland Engine renders to.\n */\nlet canvas: HTMLCanvasElement | null = null;\n\n/**\n * Current WebXR session or `null` if no session active.\n */\nlet xrSession: XRSession | null = null;\n/**\n * List of functions to call if a WebXR session is started.\n */\nconst onXRSessionStart: XrSessionStartCallback[] = [\n    (s) => {\n        xrSession = s;\n    },\n];\n/**\n * List of functions to call if a WebXR session ends.\n */\nconst onXRSessionEnd: (() => void)[] = [\n    () => {\n        xrSession = null;\n    },\n];\n\n/**\n * Whether AR is supported by the browser.\n *\n * `undefined` until support could be determined.\n */\nlet arSupported: boolean | undefined = undefined;\n/**\n * Whether VR is supported by the browser.\n *\n * `undefined` until support could be determined.\n */\nlet vrSupported: boolean | undefined = undefined;\n\n/**\n * List of functions to call once VR/AR support has been determined.\n *\n * Will be called once for AR and once for VR independent of support for each.\n * This allows you to notify the user of both cases: support and missing support of XR.\n * See the `supported` parameter of the callback, which indicates support.\n */\nlet onXRSupported: XrSupportCallback[] = [\n    (type, supported) => {\n        if (type == 'ar') arSupported = supported;\n        if (type == 'vr') vrSupported = supported;\n    },\n];\n\n/**\n * List of functions to call once the main scene has been loaded.\n */\nlet onSceneLoaded: SceneLoadedCallback[] = [];\n\n/**\n * Current main scene.\n */\nlet scene: Scene | undefined = undefined;\n/**\n * Physics, only available when physx is enabled in the runtime.\n */\nlet physics: Physics | undefined = undefined;\n\n/**\n * Image cache.\n *\n * @hidden\n */\nlet _images: (HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | null)[] = [];\n\n/**\n * List of callbacks triggered when the scene is loaded.\n *\n * @hidden\n */\nlet _sceneLoadedCallback: any[] = [];\n\nlet _tempMem: number = null!;\nlet _tempMemSize = 0;\nlet _tempMemFloat: Float32Array = null!;\nlet _tempMemInt: Int32Array = null!;\nlet _tempMemUint32: Uint32Array = null!;\nlet _tempMemUint16: Uint16Array = null!;\nlet _tempMemUint8: Uint8Array = null!;\n\n/**\n * Initialize API resources, called by the engine automatically.\n *\n * @hidden\n */\nfunction init() {\n    scene = new Scene();\n    /* For internal testing, we provide compatibility with DOM-less execution */\n    canvas =\n        typeof document === 'undefined'\n            ? null\n            : (document.getElementById('canvas') as HTMLCanvasElement);\n\n    ComponentCache = {};\n    /* Object class instances per type to avoid GC */\n    ObjectCache = [];\n\n    /* Target memory for JS API functions that return arrays */\n    allocateTempMemory(1024);\n}\n\n/**\n * Reset the runtime state, including:\n *     - Component cache\n *     - Images\n *     - Callbacks\n *\n * **Note**: This is used internally.\n *\n * @hidden\n */\nfunction reset() {\n    ComponentCache = {};\n    ObjectCache.length = 0;\n    _images.length = 0;\n    _sceneLoadedCallback.length = 0;\n    _WL.reset();\n}\n\n/**\n * Initialize API resources, called by the engine automatically, if\n * PhysX is enabled.\n *\n * @hidden\n */\nfunction _initPhysics() {\n    physics = new Physics();\n}\n\nfunction allocateTempMemory(size: number) {\n    console.log('Allocating temp mem:', size);\n    _tempMemSize = size;\n    if (_tempMem) _free(_tempMem);\n    _tempMem = _malloc(_tempMemSize);\n    updateTempMemory();\n}\n\nfunction requireTempMem(size: number) {\n    if (_tempMemSize >= size) return;\n    /* Grow in 1kb increments */\n    allocateTempMemory(Math.ceil(size / 1024) * 1024);\n}\n\nfunction updateTempMemory() {\n    _tempMemFloat = new Float32Array(HEAP8.buffer, _tempMem, _tempMemSize >> 2);\n    _tempMemInt = new Int32Array(HEAP8.buffer, _tempMem, _tempMemSize >> 2);\n    _tempMemUint32 = new Uint32Array(HEAP8.buffer, _tempMem, _tempMemSize >> 2);\n    _tempMemUint16 = new Uint16Array(HEAP8.buffer, _tempMem, _tempMemSize >> 1);\n    _tempMemUint8 = new Uint8Array(HEAP8.buffer, _tempMem, _tempMemSize);\n}\n\n/**\n * Returns a uint8 buffer view on temporary WASM memory.\n *\n * **Note**: this method might allocate if the requested memory is bigger\n * than the current temporary memory allocated.\n *\n * @param count The number of **elements** required\n * @returns A {@link TypedArray} over the WASM memory\n */\nfunction getTempBufferU8(count: number): Uint8Array {\n    requireTempMem(count);\n    return _tempMemUint8;\n}\n\n/**\n * Returns a uint16 buffer view on temporary WASM memory.\n *\n * **Note**: this method might allocate if the requested memory is bigger\n * than the current temporary memory allocated.\n *\n * @param count The number of **elements** required\n * @returns A {@link TypedArray} over the WASM memory\n */\nfunction getTempBufferU16(count: number): Uint16Array {\n    requireTempMem(count * 2);\n    return _tempMemUint16;\n}\n\n/**\n * Returns a uint32 buffer view on temporary WASM memory.\n *\n * **Note**: this method might allocate if the requested memory is bigger\n * than the current temporary memory allocated.\n *\n * @param count The number of **elements** required.\n * @returns A {@link TypedArray} over the WASM memory.\n */\nfunction getTempBufferU32(count: number): Uint32Array {\n    requireTempMem(count * 4);\n    return _tempMemUint32;\n}\n\n/**\n * Returns a int32 buffer view on temporary WASM memory.\n *\n * **Note**: this method might allocate if the requested memory is bigger\n * than the current temporary memory allocated.\n *\n * @param count The number of **elements** required.\n * @returns A {@link TypedArray} over the WASM memory.\n */\nfunction getTempBufferI32(count: number): Int32Array {\n    requireTempMem(count * 4);\n    return _tempMemInt;\n}\n\n/**\n * Returns a float32 buffer view on temporary WASM memory.\n *\n * **Note**: this method might allocate if the requested memory is bigger\n * than the current temporary memory allocated.\n *\n * @param count The number of **elements** required.\n * @returns A {@link TypedArray} over the WASM memory.\n */\nfunction getTempBufferF32(count: number): Float32Array {\n    requireTempMem(count * 4);\n    return _tempMemFloat;\n}\n\nexport {\n    canvas,\n    scene,\n    xrSession,\n    onXRSessionStart,\n    onXRSessionEnd,\n    onXRSupported,\n    onSceneLoaded,\n    arSupported,\n    vrSupported,\n    physics,\n    _images,\n    _sceneLoadedCallback,\n    textures,\n    init,\n    reset,\n    _initPhysics,\n    updateTempMemory,\n};\n\n/**\n * Constants.\n */\n\n/**\n * Default world up vector.\n */\nconst UP_VECTOR = [0, 1, 0];\n\n/**\n * Provides global scene functionality like raycasting.\n */\nexport class Scene {\n    /** Called before rendering the scene */\n    public onPreRender: (() => void)[];\n    /** Called after the scene has been rendered */\n    public onPostRender: (() => void)[];\n\n    /** Ray hit pointer in WASM heap. @hidden */\n    private _rayHit: number;\n    /** Ray hit. @hidden */\n    private _hit: RayHit;\n\n    constructor() {\n        this._rayHit = _malloc(4 * (3 * 4 + 3 * 4 + 4 + 2) + 4);\n        this._hit = new RayHit(this._rayHit);\n\n        /* Hidden property, list of functions to call after a\n         * frame has been rendered */\n        this.onPreRender = [];\n        this.onPostRender = [];\n    }\n\n    /**\n     * Currently active view components.\n     */\n    get activeViews(): ViewComponent[] {\n        const count = _wl_scene_get_active_views(_tempMem, 16);\n\n        const views: ViewComponent[] = [];\n        const viewTypeIndex = $Object._typeIndexFor('view');\n        for (let i = 0; i < count; ++i) {\n            views.push(new ViewComponent(viewTypeIndex, _tempMemInt[i]));\n        }\n\n        return views;\n    }\n\n    /**\n     * Cast a ray through the scene and find intersecting objects.\n     *\n     * The resulting ray hit will contain up to **4** closest ray hits,\n     * sorted by increasing distance.\n     *\n     * @param o Ray origin.\n     * @param d Ray direction.\n     * @param group Collision group to filter by: only objects that are\n     *        part of given group are considered for raycast.\n     *\n     * @returns The scene cached {@link RayHit} instance.\n     * @note The returned object is owned by the Scene instance\n     *   will be reused with the next {@link Scene#rayCast} call.\n     */\n    rayCast(o: number[], d: number[], group: number): RayHit {\n        _wl_scene_ray_cast(o[0], o[1], o[2], d[0], d[1], d[2], group, this._rayHit);\n        return this._hit;\n    }\n\n    /**\n     * Add an object to the scene.\n     *\n     * @param parent Parent object or `null`.\n     * @returns A newly created object.\n     */\n    addObject(parent: $Object | null): $Object {\n        const parentId = parent ? parent.objectId : 0;\n        const objectId = _wl_scene_add_object(parentId);\n        return _wrapObject(objectId);\n    }\n\n    /**\n     * Batch-add objects to the scene.\n     *\n     * Will provide better performance for adding multiple objects (e.g. > 16)\n     * than calling {@link Scene#addObject} repeatedly in a loop.\n     *\n     * By providing upfront information of how many objects will be required,\n     * the engine is able to batch-allocate the required memory rather than\n     * convervatively grow the memory in small steps.\n     *\n     * **Experimental:** This API might change in upcoming versions.\n     *\n     * @param count Number of objects to add.\n     * @param parent Parent object or `null`, default `null`.\n     * @param componentCountHint Hint for how many components in total will\n     *      be added to the created objects afterwards, default `0`.\n     * @returns Newly created objects\n     */\n    addObjects(\n        count: number,\n        parent: $Object | null,\n        componentCountHint: number\n    ): $Object[] {\n        const parentId = parent ? parent.objectId : 0;\n        requireTempMem(count * 2);\n        const actualCount = _wl_scene_add_objects(\n            parentId,\n            count,\n            componentCountHint || 0,\n            _tempMem,\n            _tempMemSize >> 1\n        );\n        const ids = _tempMemUint16.subarray(0, actualCount);\n        const objects = Array.from(ids, _wrapObject);\n        return objects;\n    }\n\n    /**\n     * Pre-allocate memory for a given amount of objects and components.\n     *\n     * Will provide better performance for adding objects later with {@link Scene#addObject}\n     * and {@link Scene#addObjects}.\n     *\n     * By providing upfront information of how many objects will be required,\n     * the engine is able to batch-allocate the required memory rather than\n     * convervatively grow the memory in small steps.\n     *\n     * **Experimental:** This API might change in upcoming versions.\n     *\n     * @param objectCount Number of objects to add.\n     * @param componentCountPerType Amount of components to\n     *      allocate for {@link Object.addComponent}, e.g. `{mesh: 100, collision: 200, \"my-comp\": 100}`.\n     * @since 0.8.10\n     */\n    reserveObjects(objectCount: number, componentCountPerType: {[key: string]: number}) {\n        componentCountPerType = componentCountPerType || {};\n        const jsManagerIndex = $Object._typeIndexFor('js');\n        let countsPerTypeIndex = _tempMemInt.subarray();\n        countsPerTypeIndex.fill(0);\n        for (const e of Object.entries(componentCountPerType)) {\n            const typeIndex = $Object._typeIndexFor(e[0]);\n            countsPerTypeIndex[typeIndex < 0 ? jsManagerIndex : typeIndex] += e[1];\n        }\n        _wl_scene_reserve_objects(objectCount, _tempMem);\n    }\n\n    /**\n     * Set the background clear color.\n     *\n     * @param color new clear color (RGBA).\n     * @since 0.8.5\n     */\n    set clearColor(color: number[]) {\n        _wl_scene_set_clearColor(color[0], color[1], color[2], color[3]);\n    }\n\n    /**\n     * Set whether to clear the color framebuffer before drawing.\n     *\n     * This function is useful if an external framework (e.g. an AR tracking\n     * framework) is responsible for drawing a camera frame before Wonderland\n     * Engine draws the scene on top of it.\n     *\n     * @param b Whether to enable color clear.\n     * @since 0.9.4\n     */\n    set colorClearEnabled(b: boolean) {\n        _wl_scene_enableColorClear(b);\n    }\n\n    /**\n     * Load a scene file (.bin)\n     *\n     * Will replace the currently active scene with the one loaded\n     * from given file. It is assumed that JavaScript components required by\n     * the new scene were registered in advance.\n     *\n     * @param filename Path to the .bin file.\n     */\n    load(filename: string) {\n        const strLen = lengthBytesUTF8(filename) + 1;\n        const ptr = _malloc(strLen);\n        stringToUTF8(filename, ptr, strLen);\n        _wl_load_scene(ptr);\n        _free(ptr);\n    }\n\n    /**\n     * Load an external 3D file (.gltf, .glb).\n     *\n     * Loads and parses the gltf file and its images and appends the result\n     * to scene.\n     *\n     * ```js\n     * WL.scene.append(filename).then(root => {\n     *     // root contains the loaded scene\n     * });\n     * ```\n     *\n     * In case the `loadGltfExtensions` option is set to true, the response\n     * will be an object containing both the root of the loaded scene and\n     * any glTF extensions found on nodes, meshes and the root of the file.\n     *\n     * ```js\n     * WL.scene.append(filename, { loadGltfExtensions: true }).then(({root, extensions}) => {\n     *     // root contains the loaded scene\n     *     // extensions.root contains any extensions at the root of glTF document\n     *     const rootExtensions = extensions.root;\n     *     // extensions.mesh and extensions.node contain extensions indexed by Object id\n     *     const childObject = root.children[0];\n     *     const meshExtensions = root.meshExtensions[childObject.objectId];\n     *     const nodeExtensions = root.nodeExtensions[childObject.objectId];\n     *     // extensions.idMapping contains a mapping from glTF node index to Object id\n     * });\n     * ```\n     *\n     * @param filename Path to the .gltf or .glb file.\n     * @param options Additional options for loading.\n     * @returns Root of the loaded scene.\n     */\n    append(filename: string, options: Record<any, string>): Promise<SceneAppendResult> {\n        options = options || {};\n        const loadGltfExtensions = !!options.loadGltfExtensions;\n\n        const strLen = lengthBytesUTF8(filename) + 1;\n        const ptr = _malloc(strLen);\n        stringToUTF8(filename, ptr, strLen);\n        const callback = _sceneLoadedCallback.length;\n        const promise = new Promise((resolve: (r: SceneAppendResult) => void, reject) => {\n            _sceneLoadedCallback[callback] = {\n                success: (id: number, extensions: Record<string, any>) => {\n                    const root = _wrapObject(id);\n                    resolve(extensions ? {root, extensions} : root);\n                },\n                error: () => reject(),\n            };\n        });\n\n        _wl_append_scene(ptr, loadGltfExtensions, callback);\n        _free(ptr);\n        return promise;\n    }\n\n    /**\n     * Unmarshalls the GltfExtensions from an Uint32Array.\n     *\n     * @param data Array containing the gltf extension data.\n     * @returns The extensions stored in an object literal.\n     *\n     * @hidden\n     */\n    _unmarshallGltfExtensions(data: Uint32Array): GLTFExtensions {\n        /* @todo: This method should be moved in the internal Emscripten library. */\n        const extensions: GLTFExtensions = {\n            root: {},\n            mesh: {},\n            node: {},\n            idMapping: {},\n        };\n\n        let index = 0;\n        const readString = () => {\n            const strPtr = data[index++];\n            const strLen = data[index++];\n            return _WL.UTF8ViewToString(strPtr, strPtr + strLen);\n        };\n\n        const idMappingSize = data[index++];\n        const idMapping = new Array(idMappingSize);\n        for (let i = 0; i < idMappingSize; ++i) {\n            idMapping[i] = data[index++];\n        }\n        extensions.idMapping = idMapping;\n\n        const meshExtensionsSize = data[index++];\n        for (let i = 0; i < meshExtensionsSize; ++i) {\n            const objectId = data[index++];\n            extensions.mesh[idMapping[objectId]] = JSON.parse(readString());\n        }\n        const nodeExtensionsSize = data[index++];\n        for (let i = 0; i < nodeExtensionsSize; ++i) {\n            const objectId = data[index++];\n            extensions.node[idMapping[objectId]] = JSON.parse(readString());\n        }\n        const rootExtensionsStr = readString();\n        if (rootExtensionsStr) {\n            extensions.root = JSON.parse(rootExtensionsStr);\n        }\n\n        return extensions;\n    }\n\n    /**\n     * Reset the scene.\n     *\n     * This method deletes all used and allocated objects, and components.\n     */\n    reset() {\n        _wl_scene_reset();\n    }\n}\n\n/**\n * Native component\n *\n * Provides access to a native component instance of a specified component type.\n *\n * Usage example:\n *\n * ```js\n * import { Component, Type } from '@wonderlandengine/api';\n *\n * class MyComponent extends Component {\n *     static TypeName = 'my-component';\n *     static Properties = {\n *         myBoolean: { type: Type.Boolean, default: false },\n *     };\n *     start() {}\n *     onActivate() {}\n *     onDeactivate() {}\n *     update(dt) {}\n * }\n * ```\n */\nexport class Component {\n    /**\n     * Unique identifier for this component class.\n     *\n     * This is used to register, add, and retrieve component of a given type.\n     */\n    public static TypeName: string;\n\n    /**\n     * Properties of this component class.\n     *\n     * Properties are public attributes that can be configured via the\n     * Wonderland Editor.\n     *\n     * Example:\n     *\n     * ```js\n     * import { Component, Type } from '@wonderlandengine/api';\n     * class MyComponent extends Component {\n     *     static TypeName = 'my-component';\n     *     static Properties = {\n     *         myBoolean: { type: Type.Boolean, default: false },\n     *         myFloat: { type: Type.Float, default: false },\n     *         myTexture: { type: Type.Texture, default: null },\n     *     };\n     * }\n     * ```\n     *\n     * Properties are automatically added to each component instance, and are\n     * accessible like any JS attribute:\n     *\n     * ```js\n     * // Creates a new component and set each properties value:\n     * const myComponent = object.addComponent(MyComponent, {\n     *     myBoolean: true,\n     *     myFloat: 42.0,\n     *     myTexture: null\n     * });\n     *\n     * // You can also override the properties on the instance:\n     * myComponent.myBoolean = false;\n     * myComponent.myFloat = -42.0;\n     * ```\n     */\n    public static Properties: Record<string, CustomParameter>;\n\n    /**\n     * Triggered when the component is initialized by the runtime. This method\n     * will only be triggered **once** after instantiation.\n     */\n    public init?(): void;\n\n    /**\n     * Triggered when the component is started by the runtime, or activated.\n     *\n     * You can use that to re-initialize the state of the component.\n     */\n    public start?(): void;\n\n    /**\n     * Triggered  **every frame** by the runtime.\n     *\n     * You should perform your business logic in this method. Example:\n     *\n     * ```js\n     * import { Component, Type } from '@wonderlandengine/api';\n     *\n     * class TranslateForwardComponent extends Component {\n     *     static TypeName = 'translate-forward-component';\n     *     static Properties = {\n     *         speed: { type: Type.Float, default: 1.0 }\n     *     };\n     *     constructor() {\n     *         this._forward = new Float32Array([0, 0, 0]);\n     *     }\n     *     update(dt) {\n     *         this.object.getForward(this._forward);\n     *         this._forward[0] *= this.speed;\n     *         this._forward[1] *= this.speed;\n     *         this._forward[2] *= this.speed;\n     *         this.object.translate(this._forward);\n     *     }\n     * }\n     * ```\n     *\n     * @param delta Elapsed time between this frame and the previous one, in **seconds**.\n     */\n    public update?(delta: number): void;\n\n    /**\n     * Triggered when the component goes from an inactive state to an active state.\n     *\n     * @note You can manually activate or deactivate a component using: {@link Component.active:setter}.\n     */\n    public onActivate?(): void;\n\n    /**\n     * Triggered when the component goes from an activated state to an inactive state.\n     *\n     * @note You can manually activate or deactivate a component using: {@link Component.active:setter}.\n     */\n    public onDeactivate?(): void;\n\n    /**\n     * Triggered when the component is removed from its object.\n     *\n     * @note You can remove a component using: {@link Component.destroy}.\n     *\n     * @since 0.9.0\n     */\n    public onDestroy?(): void;\n\n    /** Manager index. @hidden */\n    protected readonly _manager: number;\n    /** Instance index. @hidden */\n    protected readonly _id: number;\n\n    /**\n     * Object containing this object.\n     *\n     * **Note**: This is cached for faster retrieval.\n     *\n     * @hidden\n     */\n    private _object: $Object | null;\n\n    /**\n     * Component's typename, e.g., 'my-component'.\n     *\n     * @todo: Should be deprecated. Constructor should be looked up instead.\n     *\n     * @hidden\n     */\n    private _type: string | null;\n\n    /**\n     * Create a new instance\n     *\n     * @param managerIndex Index of the manager.\n     * @param id WASM component instance index.\n     *\n     * @hidden\n     */\n    constructor(managerIndex: number = -1, id: number = -1) {\n        this._manager = managerIndex;\n        this._id = id;\n        this._object = null;\n        this._type = null;\n    }\n\n    /** The name of this component's type */\n    get type(): string {\n        return this._type || $Object._typeNameFor(this._manager);\n    }\n\n    /** The object this component is attached to. */\n    get object(): $Object {\n        if (!this._object) {\n            const objectId = _wl_component_get_object(this._manager, this._id);\n            this._object = _wrapObject(objectId);\n        }\n        return this._object;\n    }\n\n    /**\n     * Set whether this component is active.\n     *\n     * Activating/deactivating a component comes at a small cost of reordering\n     * components in the respective component manager. This function therefore\n     * is not a trivial assignment.\n     *\n     * Does nothing if the component is already activated/deactivated.\n     *\n     * @param active New active state.\n     */\n    set active(active: boolean) {\n        _wl_component_setActive(this._manager, this._id, active);\n    }\n\n    /**\n     * Whether this component is active\n     */\n    get active(): boolean {\n        return _wl_component_isActive(this._manager, this._id) != 0;\n    }\n\n    /**\n     * Remove this component from its objects and destroy it.\n     *\n     * It is best practice to set the component to `null` after,\n     * to ensure it does not get used later.\n     *\n     * ```js\n     *    c.destroy();\n     *    c = null;\n     * ```\n     * @since 0.9.0\n     */\n    destroy(): void {\n        _wl_component_remove(this._manager, this._id);\n\n        /* @todo: shouldn't be set to undefined. */\n        // @ts-ignore\n        this._manager = undefined;\n        // @ts-ignore\n        this._id = undefined;\n    }\n\n    /**\n     * Checks equality by comparing whether the wrapped native component ids\n     * and component manager types are equal.\n     *\n     * @param otherComponent Component to check equality with.\n     * @returns Whether this component equals the given component.\n     */\n    equals(otherComponent: Component | undefined | null): boolean {\n        if (!otherComponent) return false;\n        return this._manager == otherComponent._manager && this._id == otherComponent._id;\n    }\n}\n\n/**\n * Native collision component.\n *\n * Provides access to a native collision component instance.\n */\nexport class CollisionComponent extends Component {\n    /** @override */\n    public static TypeName = 'collision';\n\n    /** Collision component collider */\n    get collider(): Collider {\n        return _wl_collision_component_get_collider(this._id);\n    }\n\n    /**\n     * Set collision component collider.\n     *\n     * @param collider Collider of the collision component.\n     */\n    set collider(collider: Collider) {\n        _wl_collision_component_set_collider(this._id, collider);\n    }\n\n    /**\n     * Collision component extents.\n     *\n     * If {@link collider} returns {@link Collider.Sphere}, only the first\n     * component of the returned vector is used.\n     */\n    get extents(): Float32Array {\n        return new Float32Array(\n            HEAPF32.buffer,\n            _wl_collision_component_get_extents(this._id),\n            3\n        );\n    }\n\n    /**\n     * Set collision component extents.\n     *\n     * If {@link collider} returns {@link Collider.Sphere}, only the first\n     * component of the passed vector is used.\n     *\n     * Example:\n     *\n     * ```js\n     * // Spans 1 unit on the x-axis, 2 on the y-axis, 3 on the z-axis.\n     * collision.extent = [1, 2, 3];\n     * ```\n     *\n     * @param extents Extents of the collision component, expects a\n     *      3 component array.\n     */\n    set extents(extents: Readonly<NumberArray>) {\n        this.extents.set(extents);\n    }\n\n    /**\n     * Collision component group.\n     *\n     * The groups is a bitmask that is compared to other components in {@link CollisionComponent#queryOverlaps}\n     * or the group in {@link Scene#rayCast}.\n     *\n     * Colliders that have no common groups will not overlap with each other. If a collider\n     * has none of the groups set for {@link Scene#rayCast}, the ray will not hit it.\n     *\n     * Each bit represents belonging to a group, see example.\n     *\n     * ```js\n     *    // c belongs to group 2\n     *    c.group = (1 << 2);\n     *\n     *    // c belongs to group 0\n     *    c.group = (1 << 0);\n     *\n     *    // c belongs to group 0 *and* 2\n     *    c.group = (1 << 0) | (1 << 2);\n     *\n     *    (c.group & (1 << 2)) != 0; // true\n     *    (c.group & (1 << 7)) != 0; // false\n     * ```\n     */\n    get group(): number {\n        return _wl_collision_component_get_group(this._id);\n    }\n\n    /**\n     * Set collision component group.\n     *\n     * @param group Group mask of the collision component.\n     */\n    set group(group: number) {\n        _wl_collision_component_set_group(this._id, group);\n    }\n\n    /**\n     * Query overlapping objects.\n     *\n     * Usage:\n     *\n     * ```js\n     * const collision = object.getComponent('collision');\n     * const overlaps = collision.queryOverlaps();\n     * for(const otherCollision of overlaps) {\n     *     const otherObject = otherCollision.object;\n     *     console.log(`Collision with object ${otherObject.objectId}`);\n     * }\n     * ```\n     *\n     * @returns Collision components overlapping this collider.\n     */\n    queryOverlaps(): CollisionComponent[] {\n        const count = _wl_collision_component_query_overlaps(\n            this._id,\n            _tempMem,\n            _tempMemSize >> 1\n        );\n        let overlaps = new Array(count);\n        for (let i = 0; i < count; ++i) {\n            overlaps[i] = new CollisionComponent(this._manager, _tempMemUint16[i]);\n        }\n        return overlaps;\n    }\n}\n\n/**\n * Native text component\n *\n * Provides access to a native text component instance\n */\nexport class TextComponent extends Component {\n    /** @override */\n    public static TypeName = 'text';\n\n    /** Text component alignment. */\n    get alignment(): Alignment {\n        return _wl_text_component_get_horizontal_alignment(this._id);\n    }\n\n    /**\n     * Set text component alignment.\n     *\n     * @param alignment Alignment for the text component.\n     */\n    set alignment(alignment: Alignment) {\n        _wl_text_component_set_horizontal_alignment(this._id, alignment);\n    }\n\n    /** Text component justification. */\n    get justification(): Justification {\n        return _wl_text_component_get_vertical_alignment(this._id);\n    }\n\n    /**\n     * Set text component justification.\n     *\n     * @param justification Justification for the text component.\n     */\n    set justification(justification: Justification) {\n        _wl_text_component_set_vertical_alignment(this._id, justification);\n    }\n\n    /** Text component character spacing. */\n    get characterSpacing(): number {\n        return _wl_text_component_get_character_spacing(this._id);\n    }\n\n    /**\n     * Set text component character spacing.\n     *\n     * @param spacing Character spacing for the text component.\n     */\n    set characterSpacing(spacing) {\n        _wl_text_component_set_character_spacing(this._id, spacing);\n    }\n\n    /** Text component line spacing. */\n    get lineSpacing(): number {\n        return _wl_text_component_get_line_spacing(this._id);\n    }\n\n    /**\n     * Set text component line spacing\n     *\n     * @param spacing Line spacing for the text component\n     */\n    set lineSpacing(spacing: number) {\n        _wl_text_component_set_line_spacing(this._id, spacing);\n    }\n\n    /** Text component effect. */\n    get effect(): TextEffect {\n        return _wl_text_component_get_effect(this._id);\n    }\n\n    /**\n     * Set text component effect\n     *\n     * @param effect Effect for the text component\n     */\n    set effect(effect: TextEffect) {\n        _wl_text_component_set_effect(this._id, effect);\n    }\n\n    /** Text component text. */\n    get text(): string {\n        return UTF8ToString(_wl_text_component_get_text(this._id));\n    }\n\n    /**\n     * Set text component text.\n     *\n     * @param text Text of the text component.\n     */\n    set text(text: string) {\n        const strLen = lengthBytesUTF8(text) + 1;\n        const ptr = _malloc(strLen);\n        stringToUTF8(text, ptr, strLen);\n        _wl_text_component_set_text(this._id, ptr);\n        _free(ptr);\n    }\n\n    /**\n     * Set material to render the text with.\n     *\n     * @param material New material.\n     */\n    set material(material: Material | null | undefined) {\n        const matIndex = material ? material._index : 0;\n        _wl_text_component_set_material(this._id, matIndex);\n    }\n\n    /** Material used to render the text. */\n    get material(): Material | null {\n        const id = _wl_text_component_get_material(this._id);\n        return id > 0 ? new Material(id) : null;\n    }\n}\n\n/**\n * Native view component.\n *\n * Provides access to a native view component instance.\n */\nexport class ViewComponent extends Component {\n    /** @override */\n    public static TypeName = 'view';\n\n    /** Projection matrix. */\n    get projectionMatrix(): Float32Array {\n        return new Float32Array(\n            HEAPF32.buffer,\n            _wl_view_component_get_projection_matrix(this._id),\n            16\n        );\n    }\n\n    /** ViewComponent near clipping plane value. */\n    get near(): number {\n        return _wl_view_component_get_near(this._id);\n    }\n\n    /**\n     * Set near clipping plane distance for the view.\n     *\n     * If an XR session is active, the change will apply in the\n     * following frame, otherwise the change is immediate.\n     *\n     * @param near Near depth value.\n     */\n    set near(near: number) {\n        _wl_view_component_set_near(this._id, near);\n    }\n\n    /** Far clipping plane value. */\n    get far(): number {\n        return _wl_view_component_get_far(this._id);\n    }\n\n    /**\n     * Set far clipping plane distance for the view.\n     *\n     * If an XR session is active, the change will apply in the\n     * following frame, otherwise the change is immediate.\n     *\n     * @param far Near depth value.\n     */\n    set far(far: number) {\n        _wl_view_component_set_far(this._id, far);\n    }\n\n    /**\n     * Get the horizontal field of view for the view, **in degrees**.\n     *\n     * If an XR session is active, this returns the field of view reported by\n     * the device, regardless of the fov that was set.\n     */\n    get fov(): number {\n        return _wl_view_component_get_fov(this._id);\n    }\n\n    /**\n     * Set the horizontal field of view for the view, **in degrees**.\n     *\n     * If an XR session is active, the field of view reported by the device is\n     * used and this value is ignored. After the XR session ends, the new value\n     * is applied.\n     *\n     * @param fov Horizontal field of view, **in degrees**.\n     */\n    set fov(fov) {\n        _wl_view_component_set_fov(this._id, fov);\n    }\n}\n\n/**\n * Native input component.\n *\n * Provides access to a native input component instance.\n */\nexport class InputComponent extends Component {\n    /** @override */\n    public static TypeName = 'input';\n\n    /** Input component type */\n    get inputType(): InputType {\n        return _wl_input_component_get_type(this._id);\n    }\n\n    /**\n     * Set input component type.\n     *\n     * @params New input component type.\n     */\n    set inputType(type: InputType) {\n        _wl_input_component_set_type(this._id, type);\n    }\n\n    /**\n     * WebXR Device API input source associated with this input component,\n     * if type {@link InputType.ControllerLeft} or {@link InputType.ControllerRight}.\n     */\n    get xrInputSource(): XRInputSource | null {\n        if (xrSession) {\n            for (let inputSource of xrSession.inputSources) {\n                if (inputSource.handedness == this.handedness) {\n                    return inputSource;\n                }\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * 'left', 'right' or `null` depending on the {@link InputComponent#inputType}.\n     */\n    get handedness(): 'left' | 'right' | null {\n        const inputType = this.inputType;\n        if (\n            inputType == InputType.ControllerRight ||\n            inputType == InputType.RayRight ||\n            inputType == InputType.EyeRight\n        )\n            return 'right';\n        if (\n            inputType == InputType.ControllerLeft ||\n            inputType == InputType.RayLeft ||\n            inputType == InputType.EyeLeft\n        )\n            return 'left';\n\n        return null;\n    }\n}\n\n/**\n * Native light component.\n *\n * Provides access to a native light component instance.\n */\nexport class LightComponent extends Component {\n    /** @override */\n    public static TypeName = 'light';\n\n    /** View on the light color */\n    get color(): Float32Array {\n        return new Float32Array(HEAPF32.buffer, _wl_light_component_get_color(this._id), 4);\n    }\n\n    /** Light type. */\n    get lightType(): LightType {\n        return _wl_light_component_get_type(this._id);\n    }\n\n    /**\n     * Set light type.\n     *\n     * @param lightType Type of the light component.\n     */\n    set lightType(t: LightType) {\n        _wl_light_component_set_type(this._id, t);\n    }\n}\n\n/**\n * Native animation component.\n *\n * Provides access to a native animation component instance.\n */\nexport class AnimationComponent extends Component {\n    /** @override */\n    public static TypeName = 'animation';\n\n    /**\n     * Set animation to play.\n     *\n     * Make sure to {@link Animation#retarget} the animation to affect the\n     * right objects.\n     *\n     * @param anim Animation to play.\n     */\n    set animation(anim: Animation) {\n        _wl_animation_component_set_animation(this._id, anim._index);\n    }\n\n    /** Animation set for this component */\n    get animation(): Animation {\n        return new Animation(_wl_animation_component_get_animation(this._id));\n    }\n\n    /**\n     * Set play count. Set to `0` to loop indefinitely.\n     *\n     * @param playCount Number of times to repeat the animation.\n     */\n    set playCount(playCount: number) {\n        _wl_animation_component_set_playCount(this._id, playCount);\n    }\n\n    /** Number of times the animation is played. */\n    get playCount(): number {\n        return _wl_animation_component_get_playCount(this._id);\n    }\n\n    /**\n     * Set speed. Set to negative values to run the animation backwards.\n     *\n     * Setting speed has an immediate effect for the current frame's update\n     * and will continue with the speed from the current point in the animation.\n     *\n     * @param speed New speed at which to play the animation.\n     * @since 0.8.10\n     */\n    set speed(speed: number) {\n        _wl_animation_component_set_speed(this._id, speed);\n    }\n\n    /**\n     * Speed factor at which the animation is played.\n     *\n     * @since 0.8.10\n     */\n    get speed(): number {\n        return _wl_animation_component_get_speed(this._id);\n    }\n\n    /** Current playing state of the animation */\n    get state(): AnimationState {\n        return _wl_animation_component_state(this._id);\n    }\n\n    /**\n     * Play animation.\n     *\n     * If the animation is currently paused, resumes from that position. If the\n     * animation is already playing, does nothing.\n     *\n     * To restart the animation, {@link AnimationComponent#stop} it first.\n     */\n    play(): void {\n        _wl_animation_component_play(this._id);\n    }\n\n    /** Stop animation. */\n    stop(): void {\n        _wl_animation_component_stop(this._id);\n    }\n\n    /** Pause animation. */\n    pause(): void {\n        _wl_animation_component_pause(this._id);\n    }\n}\n\n/**\n * Native mesh component.\n *\n * Provides access to a native mesh component instance.\n */\nexport class MeshComponent extends Component {\n    /** @override */\n    public static TypeName = 'mesh';\n\n    /**\n     * Set material to render the mesh with.\n     *\n     * @param material Material to render the mesh with.\n     */\n    set material(material: Material | null | undefined) {\n        _wl_mesh_component_set_material(this._id, material ? material._index : 0);\n    }\n\n    /** Material used to render the mesh. */\n    get material(): Material | null {\n        const id = _wl_mesh_component_get_material(this._id);\n        return id > 0 ? new Material(id) : null;\n    }\n\n    /** Mesh rendered by this component. */\n    get mesh(): Mesh | null {\n        const id = _wl_mesh_component_get_mesh(this._id);\n        return id > 0 ? new Mesh(id) : null;\n    }\n\n    /**\n     * Set mesh to rendered with this component.\n     *\n     * @param mesh Mesh rendered by this component.\n     */\n    set mesh(mesh: Mesh | null | undefined) {\n        _wl_mesh_component_set_mesh(this._id, mesh ? mesh._index : 0);\n    }\n\n    /** Skin for this mesh component. */\n    get skin(): Skin | null {\n        const id = _wl_mesh_component_get_skin(this._id);\n        return id > 0 ? new Skin(id) : null;\n    }\n\n    /**\n     * Set skin to transform this mesh component.\n     *\n     * @param skin Skin to use for rendering skinned meshes.\n     */\n    set skin(skin: Skin | null | undefined) {\n        _wl_mesh_component_set_skin(this._id, skin ? skin._index : 0);\n    }\n}\n\n/**\n * Native physx rigid body component.\n *\n * Provides access to a native mesh component instance.\n * Only available when using physx enabled runtime, see \"Project Settings > Runtime\".\n */\nclass PhysXComponent extends Component {\n    /** @override */\n    public static TypeName = 'physx';\n\n    /**\n     * Set whether this rigid body is static.\n     *\n     * Setting this property only takes effect once the component\n     * switches from inactive to active.\n     *\n     * @param b Whether the rigid body should be static.\n     */\n    set static(b: boolean) {\n        _wl_physx_component_set_static(this._id, b);\n    }\n\n    /**\n     * Whether this rigid body is static.\n     *\n     * This property returns whether the rigid body is *effectively*\n     * static. If static property was set while the rigid body was\n     * active, it will not take effect until the rigid body is set\n     * inactive and active again. Until the component is set inactive,\n     * this getter will return whether the rigid body is actually\n     * static.\n     */\n    get static(): boolean {\n        return !!_wl_physx_component_get_static(this._id);\n    }\n\n    /**\n     * Set whether this rigid body is kinematic.\n     *\n     * @param b Whether the rigid body should be kinematic.\n     */\n    set kinematic(b: boolean) {\n        _wl_physx_component_set_kinematic(this._id, b);\n    }\n\n    /**\n     * Whether this rigid body is kinematic.\n     */\n    get kinematic(): boolean {\n        return !!_wl_physx_component_get_kinematic(this._id);\n    }\n\n    /**\n     * Set whether this rigid body's gravity is enabled.\n     *\n     * @param b Whether the rigid body's gravity should be enabled.\n     */\n    set gravity(b: boolean) {\n        _wl_physx_component_set_gravity(this._id, b);\n    }\n\n    /**\n     * Whether this rigid body's gravity flag is enabled.\n     */\n    get gravity(): boolean {\n        return !!_wl_physx_component_get_gravity(this._id);\n    }\n\n    /**\n     * Set whether this rigid body's simulate flag is enabled.\n     *\n     * @param b Whether the rigid body's simulate flag should be enabled.\n     */\n    set simulate(b: boolean) {\n        _wl_physx_component_set_simulate(this._id, b);\n    }\n\n    /**\n     * Whether this rigid body's simulate flag is enabled.\n     */\n    get simulate(): boolean {\n        return !!_wl_physx_component_get_simulate(this._id);\n    }\n\n    /**\n     * Set whether this rigid body's allowSimulation flag is enabled.\n     * AllowSimulation and trigger can not be enabled at the same time.\n     * Enabling allowSimulation while trigger is enabled,\n     * will disable trigger.\n     *\n     * @param b Whether the rigid body's allowSimulation flag should be enabled.\n     */\n    set allowSimulation(b: boolean) {\n        _wl_physx_component_set_allowSimulation(this._id, b);\n    }\n\n    /**\n     * Whether this rigid body's allowSimulation flag is enabled.\n     */\n    get allowSimulation(): boolean {\n        return !!_wl_physx_component_get_allowSimulation(this._id);\n    }\n\n    /**\n     * Set whether this rigid body's allowQuery flag is enabled.\n     *\n     * @param b Whether the rigid body's allowQuery flag should be enabled.\n     */\n    set allowQuery(b: boolean) {\n        _wl_physx_component_set_allowQuery(this._id, b);\n    }\n\n    /**\n     * Whether this rigid body's allowQuery flag is enabled.\n     */\n    get allowQuery(): boolean {\n        return !!_wl_physx_component_get_allowQuery(this._id);\n    }\n\n    /**\n     * Set whether this rigid body's trigger flag is enabled.\n     * AllowSimulation and trigger can not be enabled at the same time.\n     * Enabling trigger while allowSimulation is enabled,\n     * will disable allowSimulation.\n     *\n     * @param b Whether the rigid body's trigger flag should be enabled.\n     */\n    set trigger(b: boolean) {\n        _wl_physx_component_set_trigger(this._id, b);\n    }\n\n    /**\n     * Whether this rigid body's trigger flag is enabled.\n     */\n    get trigger(): boolean {\n        return !!_wl_physx_component_get_trigger(this._id);\n    }\n\n    /**\n     * Set the shape for collision detection.\n     *\n     * @param s New shape.\n     * @since 0.8.5\n     */\n    set shape(s: Shape) {\n        _wl_physx_component_set_shape(this._id, s);\n    }\n\n    /** The shape for collision detection. */\n    get shape(): Shape {\n        return _wl_physx_component_get_shape(this._id);\n    }\n\n    /**\n     * Set additional data for the shape.\n     *\n     * Retrieved only from {@link PhysXComponent#shapeData}.\n     * @since 0.8.10\n     */\n    set shapeData(d) {\n        /* @todo: The array includes is useless and slow. */\n        if (d == null || ![Shape.TriangleMesh, Shape.ConvexMesh].includes(this.shape))\n            return;\n        _wl_physx_component_set_shape_data(this._id, d.index);\n    }\n\n    /**\n     * Additional data for the shape.\n     *\n     * `null` for {@link Shape} values: `None`, `Sphere`, `Capsule`, `Box`, `Plane`.\n     * `{index: n}` for `TriangleMesh` and `ConvexHull`.\n     *\n     * This data is currently only for passing onto or creating other {@link PhysXComponent}.\n     * @since 0.8.10\n     */\n    get shapeData(): {index: number} | null {\n        if (![Shape.TriangleMesh, Shape.ConvexMesh].includes(this.shape)) return null;\n        return {index: _wl_physx_component_get_shape_data(this._id)};\n    }\n\n    /**\n     * Set the shape extents for collision detection.\n     *\n     * @param e New extents for the shape.\n     * @since 0.8.5\n     */\n    set extents(e: Readonly<NumberArray>) {\n        this.extents.set(e);\n    }\n\n    /**\n     * The shape extents for collision detection.\n     */\n    get extents(): Float32Array {\n        const ptr = _wl_physx_component_get_extents(this._id);\n        return new Float32Array(HEAPF32.buffer, ptr, 3);\n    }\n\n    /**\n     * Get staticFriction.\n     */\n    get staticFriction(): number {\n        return _wl_physx_component_get_staticFriction(this._id);\n    }\n\n    /**\n     * Set staticFriction.\n     * @param v New staticFriction.\n     */\n    set staticFriction(v: number) {\n        _wl_physx_component_set_staticFriction(this._id, v);\n    }\n\n    /**\n     * Get dynamicFriction.\n     */\n    get dynamicFriction(): number {\n        return _wl_physx_component_get_dynamicFriction(this._id);\n    }\n\n    /**\n     * Set dynamicFriction\n     * @param v New dynamicDamping.\n     */\n    set dynamicFriction(v: number) {\n        _wl_physx_component_set_dynamicFriction(this._id, v);\n    }\n\n    /**\n     * Get bounciness.\n     * @since 0.9.0\n     */\n    get bounciness(): number {\n        return _wl_physx_component_get_bounciness(this._id);\n    }\n\n    /**\n     * Set bounciness.\n     * @param v New bounciness.\n     * @since 0.9.0\n     */\n    set bounciness(v: number) {\n        _wl_physx_component_set_bounciness(this._id, v);\n    }\n\n    /**\n     * Get linearDamping/\n     */\n    get linearDamping(): number {\n        return _wl_physx_component_get_linearDamping(this._id);\n    }\n\n    /**\n     * Set linearDamping.\n     * @param v New linearDamping.\n     */\n    set linearDamping(v: number) {\n        _wl_physx_component_set_linearDamping(this._id, v);\n    }\n\n    /** Get angularDamping. */\n    get angularDamping(): number {\n        return _wl_physx_component_get_angularDamping(this._id);\n    }\n\n    /**\n     * Set angularDamping.\n     * @param v New angularDamping.\n     */\n    set angularDamping(v: number) {\n        _wl_physx_component_set_angularDamping(this._id, v);\n    }\n\n    /**\n     * Set linear velocity.\n     *\n     * [PhysX Manual - \"Velocity\"](https://gameworksdocs.nvidia.com/PhysX/4.1/documentation/physxguide/Manual/RigidBodyDynamics.html#velocity)\n     *\n     * Has no effect, if the component is not active.\n     *\n     * @param v New linear velocity.\n     */\n    set linearVelocity(v: Readonly<NumberArray>) {\n        _wl_physx_component_set_linearVelocity(this._id, v[0], v[1], v[2]);\n    }\n\n    /** Linear velocity or `[0, 0, 0]` if the component is not active. */\n    get linearVelocity(): Float32Array {\n        _wl_physx_component_get_linearVelocity(this._id, _tempMem);\n        return new Float32Array(HEAPF32.buffer, _tempMem, 3);\n    }\n\n    /**\n     * Set angular velocity\n     *\n     * [PhysX Manual - \"Velocity\"](https://gameworksdocs.nvidia.com/PhysX/4.1/documentation/physxguide/Manual/RigidBodyDynamics.html#velocity)\n     *\n     * Has no effect, if the component is not active.\n     *\n     * @param v New angular velocity\n     */\n    set angularVelocity(v: Readonly<NumberArray>) {\n        _wl_physx_component_set_angularVelocity(this._id, v[0], v[1], v[2]);\n    }\n\n    /** Angular velocity or `[0, 0, 0]` if the component is not active. */\n    get angularVelocity(): Float32Array {\n        _wl_physx_component_get_angularVelocity(this._id, _tempMem);\n        return new Float32Array(HEAPF32.buffer, _tempMem, 3);\n    }\n\n    /**\n     * Set mass.\n     *\n     * [PhysX Manual - \"Mass Properties\"](https://gameworksdocs.nvidia.com/PhysX/4.1/documentation/physxguide/Manual/RigidBodyDynamics.html#mass-properties)\n     *\n     * @param m New mass.\n     */\n    set mass(m: number) {\n        _wl_physx_component_set_mass(this._id, m);\n    }\n\n    /** Mass */\n    get mass(): number {\n        return _wl_physx_component_get_mass(this._id);\n    }\n\n    /**\n     * Set mass space interia tensor.\n     *\n     * [PhysX Manual - \"Mass Properties\"](https://gameworksdocs.nvidia.com/PhysX/4.1/documentation/physxguide/Manual/RigidBodyDynamics.html#mass-properties)\n     *\n     * Has no effect, if the component is not active.\n     *\n     * @param v New mass space interatia tensor.\n     */\n    set massSpaceInteriaTensor(v: Readonly<NumberArray>) {\n        _wl_physx_component_set_massSpaceInertiaTensor(this._id, v[0], v[1], v[2]);\n    }\n\n    /**\n     * Apply a force.\n     *\n     * [PhysX Manual - \"Applying Forces and Torques\"](https://gameworksdocs.nvidia.com/PhysX/4.1/documentation/physxguide/Manual/RigidBodyDynamics.html#applying-forces-and-torques)\n     *\n     * Has no effect, if the component is not active.\n     *\n     * @param f Force vector.\n     * @param m Force mode, see {@link ForceMode}, default `Force`.\n     * @param localForce Whether the force vector is in local space, default `false`.\n     * @param p Position to apply force at, default is center of mass.\n     * @param local Whether position is in local space, default `false`.\n     */\n    addForce(\n        f: Readonly<NumberArray>,\n        m?: ForceMode,\n        localForce?: boolean,\n        p?: Readonly<NumberArray>,\n        local?: boolean\n    ) {\n        /* @todo: `localForce` should be a boolean`. */\n        m = m || ForceMode.Force;\n        if (!p) {\n            _wl_physx_component_addForce(this._id, f[0], f[1], f[2], m, !!localForce);\n        } else {\n            _wl_physx_component_addForceAt(\n                this._id,\n                f[0],\n                f[1],\n                f[2],\n                m,\n                !!localForce,\n                p[0],\n                p[1],\n                p[2],\n                !!local\n            );\n        }\n    }\n\n    /**\n     * Apply torque.\n     *\n     * [PhysX Manual - \"Applying Forces and Torques\"](https://gameworksdocs.nvidia.com/PhysX/4.1/documentation/physxguide/Manual/RigidBodyDynamics.html#applying-forces-and-torques)\n     *\n     * Has no effect, if the component is not active.\n     *\n     * @param f Force vector.\n     * @param m Force mode, see {@link ForceMode}, default `Force`.\n     */\n    addTorque(f: Readonly<NumberArray>, m: ForceMode = ForceMode.Force) {\n        _wl_physx_component_addTorque(this._id, f[0], f[1], f[2], m);\n    }\n\n    /**\n     * Add on collision callback.\n     *\n     * @param callback Function to call when this rigid body (un)collides with any other.\n     *\n     * ```js\n     *  let rigidBody = this.object.getComponent('physx');\n     *  rigidBody.onCollision(function(type, other) {\n     *      // Ignore uncollides\n     *      if(type == CollisionEventType.TouchLost) return;\n     *\n     *      // Take damage on collision with enemies\n     *      if(other.object.name.startsWith('enemy-')) {\n     *          this.applyDamage(10);\n     *      }\n     *  }.bind(this));\n     * ```\n     *\n     * @returns Id of the new callback for use with {@link PhysXComponent#removeCollisionCallback}.\n     */\n    onCollision(callback: CollisionCallback): number {\n        return this.onCollisionWith(this, callback);\n    }\n\n    /**\n     * Add filtered on collision callback.\n     *\n     * @param otherComp Component for which callbacks will\n     *        be triggered. If you pass this component, the method is equivalent to.\n     *        {@link PhysXComponent#onCollision}.\n     * @param callback Function to call when this rigid body\n     *        (un)collides with `otherComp`.\n     * @returns Id of the new callback for use with {@link PhysXComponent#removeCollisionCallback}.\n     */\n    onCollisionWith(otherComp: this, callback: CollisionCallback): number {\n        physics!._callbacks[this._id] = physics!._callbacks[this._id] || [];\n        physics!._callbacks[this._id].push(callback);\n        return _wl_physx_component_addCallback(this._id, otherComp._id || this._id);\n    }\n\n    /**\n     * Remove a collision callback added with {@link PhysXComponent#onCollision} or {@link PhysXComponent#onCollisionWith}.\n     *\n     * @param callbackId Callback id as returned by {@link PhysXComponent#onCollision} or {@link PhysXComponent#onCollisionWith}.\n     * @throws When the callback does not belong to the component.\n     * @throws When the callback does not exist.\n     */\n    removeCollisionCallback(callbackId: number): void {\n        const r = _wl_physx_component_removeCallback(this._id, callbackId);\n        /* r is the amount of object to remove from the end of the\n         * callbacks array for this object */\n        if (r) physics!._callbacks[this._id].splice(-r);\n    }\n}\n\n/** @todo: Remove as this might break tree-shaking. Instead, would be better\n * to extend the `toJSON` method to serialize / unserialize. */\nfor (const prop of [\n    'static',\n    'extents',\n    'staticFriction',\n    'dynamicFriction',\n    'bounciness',\n    'linearDamping',\n    'angularDamping',\n    'shape',\n    'shapeData',\n    'kinematic',\n    'linearVelocity',\n    'angularVelocity',\n    'mass',\n]) {\n    Object.defineProperty(PhysXComponent.prototype, prop, {enumerable: true});\n}\nexport {PhysXComponent};\n\n/**\n * Access to the physics scene\n */\nexport class Physics {\n    /**\n     * @hidden\n     *\n     * **Note**: This is public to emulate a `friend` accessor.\n     */\n    public _callbacks: Record<string, CollisionCallback[]>;\n\n    /** Ray Hit */\n    private _rayHit: number;\n    /** Hit. */\n    private _hit: RayHit;\n\n    constructor() {\n        this._rayHit = _malloc(4 * (3 * 4 + 3 * 4 + 4 + 2) + 4);\n        this._hit = new RayHit(this._rayHit);\n        this._callbacks = {};\n    }\n\n    /**\n     * Cast a ray through the physics scene and find intersecting objects.\n     *\n     * The resulting ray hit will contain **up to 4** closest ray hits,\n     * sorted by increasing distance.\n     *\n     * @param o Ray origin.\n     * @param d Ray direction.\n     * @param group Collision group to filter by: only objects that are\n     *        part of given group are considered for raycast.\n     * @param maxDistance Maximum ray distance, default `100.0`.\n     *\n     * @returns The RayHit instance, belonging to this class.\n     *\n     * @note The returned {@link RayHit} object is owned by the Physics instance and\n     *       will be reused with the next {@link Physics#rayCast} call.\n     */\n    rayCast(\n        o: Readonly<NumberArray>,\n        d: Readonly<NumberArray>,\n        group: number,\n        maxDistance?: number\n    ): RayHit {\n        if (typeof maxDistance === 'undefined') maxDistance = 100.0;\n        _wl_physx_ray_cast(\n            o[0],\n            o[1],\n            o[2],\n            d[0],\n            d[1],\n            d[2],\n            group,\n            maxDistance || 100,\n            this._rayHit\n        );\n        return this._hit;\n    }\n\n    /**\n     * Triggered by the WASM runtime.\n     *\n     * @hidden\n     */\n    private _callCollisionCallback(\n        a: number,\n        index: number,\n        type: number,\n        b: number\n    ): void {\n        physics!._callbacks[a][index](\n            type,\n            new PhysXComponent($Object._typeIndexFor('physx'), b)\n        );\n    }\n}\n\n/**\n * Mesh index type.\n */\nexport enum MeshIndexType {\n    /** Single byte mesh index, range 0-255 */\n    UnsignedByte = 1,\n\n    /** Two byte mesh index, range 0-65535 */\n    UnsignedShort = 2,\n\n    /** Four byte mesh index, range 0-4294967295 */\n    UnsignedInt = 4,\n}\n\n/**\n * Mesh constructor parameters object.\n *\n * Usage:\n *\n * ```js\n * const mesh = Mesh({vertexCount: 3, indexData: [0, 1, 2]});\n * ```\n */\nexport interface MeshParameters {\n    /** Number of vertices to allocate. */\n    vertexCount: number;\n    /**\n     * Deprecated, use `vertexCount` instead and set data with {@link Mesh#attribute} instead.\n     *\n     * Interleaved vertex data values. A vertex is a\n     *      set of 8 float values:\n     *          - 0-2 Position\n     *          - 3-5 Normal\n     *          - 6-8 Texture Coordinate\n     *\n     * @deprecated\n     */\n    vertexData: Float32Array;\n    /** Index data values. */\n    indexData: Readonly<NumberArray>;\n    /** Index type, `null` if not indexed. */\n    indexType: MeshIndexType;\n    /** `true` if the mesh should be skinned. Defaults to false. */\n    skinned: boolean;\n}\n\n/**\n * Wrapper around a native mesh data.\n *\n * To modify a mesh, you get access to a {@link MeshAttributeAccessor} that allows you to modify\n * the content of the buffers:\n *\n * Usage:\n *\n * ```js\n * const mesh = new Mesh({vertexCount: 3, indexData: [0, 1, 2] });\n * const positions = mesh.attribute(MeshAttribute.Position);\n * ...\n * ```\n */\nexport class Mesh {\n    /**\n     * Size of a vertex in float elements.\n     * @deprecated Replaced with {@link Mesh#attribute} and {@link MeshAttributeAccessor}\n     */\n    static get VERTEX_FLOAT_SIZE(): number {\n        return 3 + 3 + 2;\n    }\n    /**\n     * Size of a vertex in bytes.\n     * @deprecated Replaced with {@link Mesh#attribute} and {@link MeshAttributeAccessor}\n     */\n    static get VERTEX_SIZE(): number {\n        return this.VERTEX_FLOAT_SIZE * 4;\n    }\n\n    /**\n     * Position attribute offsets in float elements.\n     * @deprecated Replaced with {@link Mesh#attribute} and {@link MeshAttribute#Position}\n     */\n    static get POS(): {X: number; Y: number; Z: number} {\n        return {X: 0, Y: 1, Z: 2};\n    }\n    /**\n     * Texture coordinate attribute offsets in float elements.\n     * @deprecated Replaced with {@link Mesh#attribute} and {@link MeshAttribute#TextureCoordinate}\n     */\n    static get TEXCOORD(): {U: number; V: number} {\n        return {U: 3, V: 4};\n    }\n    /**\n     * Normal attribute offsets in float elements.\n     * @deprecated Replaced with {@link Mesh#attribute} and {@link MeshAttribute#Normal}\n     */\n    static get NORMAL(): {X: number; Y: number; Z: number} {\n        return {X: 5, Y: 6, Z: 7};\n    }\n\n    /**\n     * Index of the mesh in the manager.\n     *\n     * @hidden\n     */\n    public _index: number;\n\n    /**\n     * Create a new instance.\n     *\n     * @param params Either a mesh index to wrap or set of parameters to create a new mesh.\n     *    For more information, please have a look at the {@link MeshParameters} interface.\n     */\n    constructor(params: Partial<MeshParameters> | number) {\n        if (typeof params === 'object') {\n            if (!params.vertexCount && params.vertexData) {\n                params.vertexCount = params.vertexData.length / Mesh.VERTEX_FLOAT_SIZE;\n            }\n            if (!params.vertexCount) throw new Error(\"Missing parameter 'vertexCount'\");\n\n            let indexData = 0;\n            let indexType = 0;\n            let indexDataSize = 0;\n            if (params.indexData) {\n                indexType = params.indexType || MeshIndexType.UnsignedShort;\n                indexDataSize = params.indexData.length * indexType;\n                indexData = _malloc(indexDataSize);\n                /* Copy the index data into wasm memory */\n                switch (indexType) {\n                    case MeshIndexType.UnsignedByte:\n                        HEAPU8.set(params.indexData, indexData);\n                        break;\n                    case MeshIndexType.UnsignedShort:\n                        HEAPU16.set(params.indexData, indexData >> 1);\n                        break;\n                    case MeshIndexType.UnsignedInt:\n                        HEAPU32.set(params.indexData, indexData >> 2);\n                        break;\n                }\n            }\n\n            const {skinned = false} = params;\n\n            this._index = _wl_mesh_create(\n                indexData,\n                indexDataSize,\n                indexType,\n                params.vertexCount,\n                skinned\n            );\n\n            if (params.vertexData) {\n                const positions = this.attribute(MeshAttribute.Position);\n                const normals = this.attribute(MeshAttribute.Normal);\n                const textureCoordinates = this.attribute(MeshAttribute.TextureCoordinate);\n\n                for (let i = 0; i < params.vertexCount; ++i) {\n                    const start = i * Mesh.VERTEX_FLOAT_SIZE;\n                    positions!.set(i, params.vertexData.subarray(start, start + 3));\n                    textureCoordinates?.set(\n                        i,\n                        params.vertexData.subarray(start + 3, start + 5)\n                    );\n                    normals?.set(i, params.vertexData.subarray(start + 5, start + 8));\n                }\n            }\n        } else {\n            this._index = params;\n        }\n    }\n\n    /**\n     * Vertex data (read-only).\n     *\n     * @deprecated Replaced with {@link attribute}\n     */\n    get vertexData(): Float32Array {\n        const ptr = _wl_mesh_get_vertexData(this._index, _tempMem);\n        return new Float32Array(\n            HEAPF32.buffer,\n            ptr,\n            Mesh.VERTEX_FLOAT_SIZE * HEAPU32[_tempMem / 4]\n        );\n    }\n\n    /** Number of vertices in this mesh. */\n    get vertexCount(): number {\n        return _wl_mesh_get_vertexCount(this._index);\n    }\n\n    /** Index data (read-only) or `null` if the mesh is not indexed. */\n    get indexData(): Uint8Array | Uint16Array | Uint32Array | null {\n        const ptr = _wl_mesh_get_indexData(this._index, _tempMem, _tempMem + 4);\n        if (ptr === null) return null;\n\n        const indexCount = HEAPU32[_tempMem / 4];\n        const indexSize = HEAPU32[_tempMem / 4 + 1];\n        switch (indexSize) {\n            case MeshIndexType.UnsignedByte:\n                return new Uint8Array(HEAPU8.buffer, ptr, indexCount);\n            case MeshIndexType.UnsignedShort:\n                return new Uint16Array(HEAPU16.buffer, ptr, indexCount);\n            case MeshIndexType.UnsignedInt:\n                return new Uint32Array(HEAPU32.buffer, ptr, indexCount);\n        }\n        return null;\n    }\n\n    /**\n     * Apply changes to {@link attribute | vertex attributes}.\n     *\n     * Uploads the updated vertex attributes to the GPU and updates the bounding\n     * sphere to match the new vertex positions.\n     *\n     * Since this is an expensive operation, call it only once you have performed\n     * all modifications on a mesh and avoid calling if you did not perform any\n     * modifications at all.\n     */\n    update() {\n        _wl_mesh_update(this._index);\n    }\n\n    /** @overload */\n    getBoundingSphere(): Float32Array;\n    /** @overload */\n    getBoundingSphere<T extends NumberArray>(out: T): T;\n    /**\n     * Mesh bounding sphere.\n     *\n     * @param out Preallocated array to write into, to avoid garbage,\n     *     otherwise will allocate a new {@link Float32Array}.\n     *\n     * ```js\n     *  const sphere = new Float32Array(4);\n     *  for(...) {\n     *      mesh.getBoundingSphere(sphere);\n     *      ...\n     *  }\n     * ```\n     *\n     * If the position data is changed, call {@link Mesh#update} to update the\n     * bounding sphere.\n     *\n     * @returns Bounding sphere, 0-2 sphere origin, 3 radius.\n     */\n    getBoundingSphere<T extends NumberArray>(\n        out: T | Float32Array = new Float32Array(4)\n    ): T | Float32Array {\n        _wl_mesh_get_boundingSphere(this._index, _tempMem);\n        out[0] = _tempMemFloat[0];\n        out[1] = _tempMemFloat[1];\n        out[2] = _tempMemFloat[2];\n        out[3] = _tempMemFloat[3];\n        return out as T;\n    }\n\n    /**\n     * Get an attribute accessor to retrieve or modify data of give attribute.\n     *\n     * @param attr Attribute to get access to\n     * @returns Attribute to get access to or `null`, if mesh does not have this attribute.\n     *\n     * Call {@link update} for changes to vertex attributes to take effect.\n     *\n     * If there are no shaders in the scene that use `TextureCoordinate` for example,\n     * no meshes will have the `TextureCoordinate` attribute.\n     *\n     * For flexible reusable components, take this into account that only `Position`\n     * is guaranteed to be present at all time.\n     */\n    attribute(attr: MeshAttribute): MeshAttributeAccessor | null {\n        if (typeof attr != 'number')\n            throw new TypeError('Expected number, but got ' + typeof attr);\n        _wl_mesh_get_attribute(this._index, attr, _tempMem);\n        if (_tempMemUint32[0] == 255) return null;\n\n        const a = new MeshAttributeAccessor(attr);\n        a._attribute = _tempMemUint32[0];\n        a._offset = _tempMemUint32[1];\n        a._stride = _tempMemUint32[2];\n        a._formatSize = _tempMemUint32[3];\n        a._componentCount = _tempMemUint32[4];\n        const arraySize = _tempMemUint32[5];\n        /* The WASM api returns `0` for a scalar value. We clamp it to 1 as we strictly use it as a multiplier for get/set operations */\n        a._arraySize = arraySize ? arraySize : 1;\n        (a.length as number) = this.vertexCount;\n        return a;\n    }\n\n    /**\n     * Destroy and free the meshes memory.\n     *\n     * It is best practice to set the mesh variable to `null` after calling\n     * destroy to prevent accidental use:\n     *\n     * ```js\n     *   mesh.destroy();\n     *   mesh = null;\n     * ```\n     *\n     * Accessing the mesh after destruction behaves like accessing an empty\n     * mesh.\n     *\n     * @since 0.9.0\n     */\n    destroy(): void {\n        _wl_mesh_destroy(this._index);\n    }\n}\n\n/**\n * An iterator over a mesh vertex attribute.\n *\n * Usage:\n *\n * ```js\n *   const mesh = this.object.getComponent('mesh').mesh;\n *   const positions = mesh.attribute(WL.MeshAttribute.Position);\n *\n *   const temp = new Float32Array(3);\n *   for(int i = 0; i < positions.length; ++i) {\n *       // pos will reference temp and thereby not allocate additional\n *       // JavaScript garbage, which would cause a perf spike when collected.\n *       const pos = positions.get(i, temp);\n *       // scale position by 2 on X axis only\n *       pos[0] *= 2.0f;\n *       positions.set(i, pos);\n *   }\n *   // we're done modifying, tell the engine to move vertex data to the GPU\n *   mesh.update();\n * ```\n */\nexport class MeshAttributeAccessor {\n    /** Attribute index. @hidden */\n    public _attribute: number = -1;\n    /** Attribute offset. @hidden */\n    public _offset: number = 0;\n    /** Attribute stride. @hidden */\n    public _stride: number = 0;\n    /** Format size native enum. @hidden */\n    public _formatSize: number = 0;\n    /** Number of components per vertex. @hidden */\n    public _componentCount: number = 0;\n    /** Number of values per vertex. @hidden */\n    public _arraySize: number = 1;\n\n    /** Max number of elements. */\n    public readonly length: number = 0;\n\n    /**\n     * Class to instantiate an ArrayBuffer to get/set values.\n     */\n    private _bufferType: typeof Float32Array | typeof Uint16Array;\n    /**\n     * Function to allocate temporary WASM memory. This is cached to avoid\n     * any conditional during get/set.\n     */\n    private _tempBufferGetter: (bytes: number) => Float32Array | Uint16Array;\n\n    /**\n     * Create a new instance.\n     *\n     * @param type The type of data this accessor is wrapping.\n     * @note Do not use this constructor. Instead, please use the {@link Mesh.attribute} method.\n     *\n     * @hidden\n     */\n    constructor(type = MeshAttribute.Position) {\n        switch (type) {\n            case MeshAttribute.Position:\n            case MeshAttribute.Normal:\n            case MeshAttribute.TextureCoordinate:\n            case MeshAttribute.Tangent:\n            case MeshAttribute.Color:\n            case MeshAttribute.JointWeight:\n                this._bufferType = Float32Array;\n                this._tempBufferGetter = getTempBufferF32;\n                break;\n            case MeshAttribute.JointId:\n                this._bufferType = Uint16Array;\n                this._tempBufferGetter = getTempBufferU16;\n                break;\n            case MeshAttribute.SecondaryJointWeight:\n            case MeshAttribute.SecondaryJointId:\n                /* @todo: Completely remove occurrences of SecondaryJointId for 1.0 */\n                console.error(`Deprecated attribute accessor type: ${type}`);\n            default:\n                throw new Error(`Invalid attribute accessor type: ${type}`);\n        }\n    }\n\n    /**\n     * Create a new TypedArray to hold this attribute values.\n     *\n     * This method is useful to create a view to hold the data to\n     * pass to {@link MeshAttributeAccessor.get} and {@link MeshAttributeAccessor.set}\n     *\n     * Example:\n     *\n     * ```js\n     * const vertexCount = 4;\n     * const positionAttribute = mesh.attribute(MeshAttributes.Position);\n     *\n     * // A position has 3 floats per vertex. Thus, positions has length 3 * 4.\n     * const positions = positionAttribute.createArray(vertexCount);\n     * ```\n     *\n     * @param count The number of **vertices** expected.\n     * @returns A TypedArray with the appropriate format to access the data\n     */\n    createArray(count = 1): Float32Array | Uint16Array {\n        count = count > this.length ? this.length : count;\n        return new this._bufferType(count * this._componentCount * this._arraySize);\n    }\n\n    /** @overload */\n    get(index: number): Float32Array | Uint16Array;\n    /**\n     * Get attribute element.\n     *\n     * @param index Index\n     * @param out Preallocated array to write into,\n     *      to avoid garbage, otherwise will allocate a new TypedArray.\n     *\n     * `out.length` needs to be a multiple of the attributes component count, see\n     * {@link MeshAttribute}. If `out.length` is more than one multiple, it will be\n     * filled with the next n attribute elements, which can reduce overhead\n     * of this call.\n     *\n     * @returns The `out` parameter\n     */\n    get<T extends NumberArray>(\n        index: number,\n        out: T | Float32Array | Uint16Array = this.createArray()\n    ) {\n        if (out.length % this._componentCount !== 0)\n            throw new Error(\n                `out.length, ${out.length} is not a multiple of the attribute vector components, ${this._componentCount}`\n            );\n\n        const dest = this._tempBufferGetter(out.length);\n        const elementSize = this._bufferType.BYTES_PER_ELEMENT;\n        const destSize = elementSize * out.length;\n        const srcFormatSize = this._formatSize * this._arraySize;\n        const destFormatSize = this._componentCount * elementSize * this._arraySize;\n\n        _wl_mesh_get_attribute_values(\n            this._attribute,\n            srcFormatSize,\n            this._offset + index * this._stride,\n            this._stride,\n            destFormatSize,\n            dest.byteOffset,\n            destSize\n        );\n\n        for (let i = 0; i < out.length; ++i) out[i] = dest[i];\n        return out;\n    }\n\n    /**\n     * Set attribute element.\n     *\n     * @param i Index\n     * @param v Value to set the element to\n     *\n     * `v.length` needs to be a multiple of the attributes component count, see\n     * {@link MeshAttribute}. If `v.length` is more than one multiple, it will be\n     * filled with the next n attribute elements, which can reduce overhead\n     * of this call.\n     *\n     * @returns Reference to self (for method chaining)\n     */\n    set(i: number, v: Readonly<NumberArray>) {\n        if (v.length % this._componentCount !== 0)\n            throw new Error(\n                `out.length, ${v.length} is not a multiple of the attribute vector components, ${this._componentCount}`\n            );\n\n        const elementSize = this._bufferType.BYTES_PER_ELEMENT;\n        const srcSize = elementSize * v.length;\n        const srcFormatSize = this._componentCount * elementSize * this._arraySize;\n        const destFormatSize = this._formatSize * this._arraySize;\n\n        /* Unless we are already working with data from WASM heap, we\n         * need to copy into temporary memory. */\n        if ((v as Float32Array).buffer != HEAPU8.buffer) {\n            const dest = this._tempBufferGetter(v.length);\n            dest.set(v);\n            v = dest;\n        }\n\n        _wl_mesh_set_attribute_values(\n            this._attribute,\n            srcFormatSize,\n            (v as Float32Array).byteOffset,\n            srcSize,\n            destFormatSize,\n            this._offset + i * this._stride,\n            this._stride\n        );\n\n        return this;\n    }\n}\n\n/**\n * Constructor parameters object for a {@link Material} instance.\n */\nexport interface MaterialParameters {\n    /** The name of the pipeline. */\n    pipeline: string;\n}\n\n/**\n * Wrapper around a native material.\n *\n * Each material instance will have properties associated to the pipeline it uses.\n * The material properties are automatically added to each material instance, example:\n *\n * ```js\n * const material = mesh.material; // Material with a `Phong Opaque Textured` pipeline\n * // You can access all the material properties from the editor using:\n * material.diffuseTexture = null;\n * material.diffuseColor = [1.0, 0.0, 0.0, 1.0];\n * ```\n */\nexport class Material {\n    /**\n     * Index of this material in the manager.\n     *\n     * @hidden\n     */\n    public _index: number;\n\n    /**\n     * Material definition index in the scene.\n     *\n     * @hidden\n     */\n    private _definition: number;\n\n    /**\n     * Create a new Material.\n     *\n     * @note Creating material is expensive. Please use {@link Material#clone} to clone a material.\n     * @note Do not use this constructor directly with an index, this is reserved for internal purposes.\n     */\n    constructor(params: number | MaterialParameters) {\n        if (typeof params !== 'number') {\n            if (!params?.pipeline) throw new Error(\"Missing parameter 'pipeline'\");\n            const pipeline = params.pipeline;\n            const lengthBytes = lengthBytesUTF8(pipeline) + 1;\n            stringToUTF8(pipeline, _tempMem, lengthBytes);\n            this._index = _wl_material_create(_tempMem);\n            if (this._index < 0) throw new Error(`No such pipeline '${pipeline}'`);\n        } else {\n            this._index = params;\n        }\n\n        this._definition = _wl_material_get_definition(this._index);\n        if (!_WL._materialDefinitions[this._definition])\n            throw new Error(\n                `Material Definition ${this._definition} not found for material with index ${this._index}`\n            );\n\n        return new Proxy(this, {\n            get(target, prop) {\n                const definition = _WL._materialDefinitions[target._definition];\n                const param = definition.get(prop);\n                if (!param) return (target as {[key: string | symbol]: any})[prop];\n                if (_wl_material_get_param_value(target._index, param.index, _tempMem)) {\n                    const type = param.type;\n                    switch (type.type) {\n                        case MaterialParamType.UnsignedInt:\n                            return type.componentCount == 1\n                                ? _tempMemUint32[0]\n                                : new Uint32Array(\n                                      HEAPU32.buffer,\n                                      _tempMem,\n                                      type.componentCount\n                                  );\n                        case MaterialParamType.Int:\n                            return type.componentCount == 1\n                                ? _tempMemInt[0]\n                                : new Int32Array(\n                                      HEAP32.buffer,\n                                      _tempMem,\n                                      type.componentCount\n                                  );\n                        case MaterialParamType.Float:\n                            return type.componentCount == 1\n                                ? _tempMemFloat[0]\n                                : new Float32Array(\n                                      HEAPF32.buffer,\n                                      _tempMem,\n                                      type.componentCount\n                                  );\n                        case MaterialParamType.Sampler:\n                            return new Texture(_tempMemInt[0]);\n                        default:\n                            throw new Error(\n                                `Invalid type ${type} on parameter ${param.index} for material ${target._index}`\n                            );\n                    }\n                }\n            },\n\n            set(target, prop, value) {\n                const definition = _WL._materialDefinitions[target._definition];\n                const param = definition.get(prop);\n                if (!param) {\n                    (target as {[key: string | symbol]: any})[prop] = value;\n                    return true;\n                }\n                const type = param.type;\n                switch (type.type) {\n                    case MaterialParamType.UnsignedInt:\n                    case MaterialParamType.Int:\n                    case MaterialParamType.Sampler:\n                        const v = value instanceof Texture ? value.id : value;\n                        _wl_material_set_param_value_uint(target._index, param.index, v);\n                        break;\n                    case MaterialParamType.Float:\n                        let count = 1;\n                        if (typeof value === 'number') {\n                            _tempMemFloat[0] = value;\n                        } else {\n                            count = value.length;\n                            for (let i = 0; i < count; ++i) _tempMemFloat[i] = value[i];\n                        }\n                        _wl_material_set_param_value_float(\n                            target._index,\n                            param.index,\n                            _tempMem,\n                            count\n                        );\n                        break;\n                    case MaterialParamType.Font:\n                        throw new Error(\n                            'Setting font properties is currently unsupported.'\n                        );\n                }\n                return true;\n            },\n        });\n    }\n\n    /** Name of the shader used by this material. */\n    get shader(): string {\n        return UTF8ToString(_wl_material_get_shader(this._index));\n    }\n\n    /**\n     * Create a copy of the underlying native material.\n     *\n     * @returns Material clone.\n     */\n    clone(): Material | null {\n        const id = _wl_material_clone(this._index);\n        return id > 0 ? new Material(id) : null;\n    }\n\n    /**\n     * Wrap a native material index.\n     *\n     * @param index The index.\n     * @returns Material instance or `null` if index <= 0.\n     *\n     * @deprecated Please use `new Material()` instead.\n     */\n    static wrap(index: number): Material | null {\n        /** @todo: this propagate nullable in the entire codebase. Remove. */\n        return index > 0 ? new Material(index) : null;\n    }\n}\n\n/** Temporary canvas */\nlet tempCanvas: HTMLCanvasElement | null = null;\n\n/**\n * Wrapper around a native texture data.\n */\nexport class Texture {\n    /** Index in the manager. @hidden */\n    private _id: number = 0;\n    /** HTML image index. @hidden */\n    private _imageIndex: number = undefined!; /* @todo: Remove undefined */\n\n    /**\n     * @param param HTML media element to create texture from or texture id to wrap.\n     */\n    constructor(param: HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | number) {\n        if (\n            param instanceof HTMLImageElement ||\n            param instanceof HTMLVideoElement ||\n            param instanceof HTMLCanvasElement\n        ) {\n            const index = _images.length;\n            _images.push(param);\n            this._imageIndex = index;\n            this._id = _wl_renderer_addImage(index);\n        } else {\n            this._id = param;\n        }\n        textures[this._id] = this;\n    }\n\n    /** Whether this texture is valid. */\n    get valid(): boolean {\n        return this._id >= 0;\n    }\n\n    /** Index in this manager. */\n    get id(): number {\n        return this._id;\n    }\n\n    /** Update the texture to match the HTML element (e.g. reflect the current frame of a video). */\n    update() {\n        if (!this.valid) return;\n        _wl_renderer_updateImage(this._id, this._imageIndex);\n    }\n\n    /** Width of the texture. */\n    get width(): number {\n        return _wl_texture_width(this._id);\n    }\n\n    /** Height of the texture. */\n    get height(): number {\n        return _wl_texture_height(this._id);\n    }\n\n    /**\n     * Update a subrange on the texture to match the HTML element (e.g. reflect the current frame of a video).\n     *\n     * Usage:\n     *\n     * ```js\n     * // Copies rectangle of pixel starting from (10, 20)\n     * texture.updateSubImage(10, 20, 600, 400);\n     * ```\n     *\n     * @param x x offset\n     * @param y y offset\n     * @param w width\n     * @param h height\n     */\n    updateSubImage(x: number, y: number, w: number, h: number): void {\n        if (!this.valid) return;\n\n        /* Lazy initialize temp canvas */\n        if (!tempCanvas) tempCanvas = document.createElement('canvas');\n\n        const img = _images[this._imageIndex];\n        if (!img) return;\n\n        tempCanvas.width = w;\n        tempCanvas.height = h;\n        /* @todo: Would be smarted to cache context. */\n        tempCanvas.getContext('2d')?.drawImage(img, x, y, w, h, 0, 0, w, h);\n        /* @todo: Do not store temporary canvas. */\n        _images[this._imageIndex] = tempCanvas;\n\n        try {\n            _wl_renderer_updateImage(\n                this._id,\n                this._imageIndex,\n                x,\n                ((img as HTMLVideoElement).videoHeight || img.height) - y - h\n            );\n        } finally {\n            _images[this._imageIndex] = img;\n        }\n    }\n\n    /**\n     * Destroy and free the texture's texture altas space and memory.\n     *\n     * It is best practice to set the texture variable to `null` after calling\n     * destroy to prevent accidental use of the invalid texture:\n     *\n     * ```js\n     *   texture.destroy();\n     *   texture = null;\n     * ```\n     *\n     * @since 0.9.0\n     */\n    destroy(): void {\n        _wl_texture_destroy(this._id);\n        if (this._imageIndex) {\n            _images[this._imageIndex] = null;\n            this._imageIndex = undefined!;\n        }\n    }\n}\n\n/* @todo: the `textures` literal should have a better shape/api. */\nexport type TextureCache = {\n    [key: string]: Texture | ((filename: string, crossOrigin?: string) => Promise<Texture>);\n    load: (filename: string, crossOrigin?: string) => Promise<Texture>;\n};\n\n/**\n * Access to the textures managed by Wonderland Engine.\n */\nconst textures: TextureCache = {\n    /**\n     * Load an image from URL as {@link Texture}\n     * @param filename URL to load from\n     * @param crossOrigin Cross origin flag for the {@link Image} object\n     * @returns Loaded texture\n     */\n    load: function (filename: string, crossOrigin?: string): Promise<Texture> {\n        let image = new Image();\n        if (crossOrigin !== undefined) {\n            image.crossOrigin = crossOrigin;\n        }\n        image.src = filename;\n        return new Promise((resolve, reject) => {\n            image.onload = function () {\n                let texture = new Texture(image);\n                if (!texture.valid) {\n                    reject(\n                        'Failed to add image ' +\n                            image.src +\n                            ' to texture atlas. Probably incompatible format.'\n                    );\n                }\n                resolve(texture);\n            };\n        });\n    },\n};\n\n/**\n * Wrapper around a native animation.\n */\nexport class Animation {\n    /** Index of the mesh in the manager. @hidden */\n    public _index: number;\n\n    /**\n     * @param index Index in the manager\n     */\n    constructor(index: number) {\n        this._index = index;\n    }\n\n    /** Duration of this animation. */\n    get duration(): number {\n        return _wl_animation_get_duration(this._index);\n    }\n\n    /** Number of tracks in this animation. */\n    get trackCount(): number {\n        return _wl_animation_get_trackCount(this._index);\n    }\n\n    /**\n     * Clone this animation retargeted to a new set of objects.\n     *\n     * The clone shares most of the data with the original and is therefore\n     * light-weight.\n     *\n     * **Experimental:** This API might change in upcoming versions.\n     *\n     * If retargetting to {@link Skin}, the join names will be used to determine a mapping\n     * from the previous skin to the new skin. The source skin will be retrieved from\n     * the first track in the animation that targets a joint.\n     *\n     * @param newTargets New targets per track. Expected to have\n     *      {@link Animation#trackCount} elements or to be a {@link Skin}.\n     * @returns The retargeted clone of this animation.\n     */\n    retarget(newTargets: $Object[] | Skin): Animation {\n        if (newTargets instanceof Skin) {\n            const animId = _wl_animation_retargetToSkin(this._index, newTargets._index);\n            return new Animation(animId);\n        }\n\n        if (newTargets.length != this.trackCount) {\n            throw Error(\n                'Expected ' +\n                    this.trackCount.toString() +\n                    ' targets, but got ' +\n                    newTargets.length.toString()\n            );\n        }\n        const ptr = _malloc(2 * newTargets.length);\n        for (let i = 0; i < newTargets.length; ++i) {\n            HEAPU16[ptr >> (1 + i)] = (newTargets[i] as $Object).objectId;\n        }\n        const animId = _wl_animation_retarget(this._index, ptr);\n        _free(ptr);\n\n        return new Animation(animId);\n    }\n}\n\n/**\n * Scene graph object.\n *\n * Node in the scene graph or \"entity\". Consists of transformation and a reference\n * to its parent object. Usually holds components and is accessible by components\n * through {@link Component#object}.\n *\n * Objects are stored in a data oriented manner inside WebAssembly memory. This class\n * is a JavaScript API wrapper around this memory for more convenient use in\n * components.\n *\n * Objects can be created and added to a scene through\n * {@link Scene#addObject} on the {@link scene | main scene}.\n */\nclass $Object {\n    /**\n     * Object index in the manager.\n     */\n    public objectId: number; /* @todo: Make private */\n\n    /**\n     * @param o Object id to wrap\n     */\n    constructor(o: number) {\n        this.objectId = o;\n    }\n\n    /**\n     * Name of the object.\n     *\n     * Useful for identifying objects during debugging.\n     */\n    get name(): string {\n        return UTF8ToString(_wl_object_name(this.objectId));\n    }\n\n    /**\n     * Set the object's name.\n     *\n     * @param newName The new name to set.\n     */\n    set name(newName: string) {\n        const lengthBytes = lengthBytesUTF8(newName) + 1;\n        const mem = _malloc(lengthBytes);\n        stringToUTF8(newName, mem, lengthBytes);\n        _wl_object_set_name(this.objectId, mem);\n        _free(mem);\n    }\n\n    /**\n     * Parent of this object or `null` if parented to root.\n     */\n    get parent(): $Object | null {\n        const p = _wl_object_parent(this.objectId);\n        return p == 0 ? null : _wrapObject(p);\n    }\n\n    /**\n     * Children of this object.\n     */\n    get children(): $Object[] {\n        const childrenCount = _wl_object_get_children_count(this.objectId);\n        if (childrenCount === 0) return [];\n\n        requireTempMem(childrenCount * 2);\n\n        _wl_object_get_children(this.objectId, _tempMem, _tempMemSize >> 1);\n\n        const children = new Array(childrenCount);\n        for (let i = 0; i < childrenCount; ++i) {\n            children[i] = _wrapObject(_tempMemUint16[i]);\n        }\n        return children;\n    }\n\n    /**\n     * Reparent object to given object.\n     *\n     * @note Reparenting is not trivial and might have a noticeable performance impact.\n     *\n     * @param newParent New parent or `null` to parent to root\n     */\n    set parent(newParent: $Object | undefined | null) {\n        _wl_object_set_parent(this.objectId, newParent == null ? 0 : newParent.objectId);\n    }\n\n    /** Reset local transformation (translation, rotation and scaling) to identity. */\n    resetTransform(): void {\n        _wl_object_reset_translation_rotation(this.objectId);\n        _wl_object_reset_scaling(this.objectId);\n    }\n\n    /** Reset local translation and rotation to identity */\n    resetTranslationRotation(): void {\n        _wl_object_reset_translation_rotation(this.objectId);\n    }\n\n    /**\n     * Reset local rotation, keep translation.\n     * @note To reset both rotation and translation, prefer\n     *       {@link resetTranslationRotation}.\n     */\n    resetRotation(): void {\n        _wl_object_reset_rotation(this.objectId);\n    }\n\n    /**\n     * Reset local translation, keep rotation.\n     * @note To reset both rotation and translation, prefer\n     *       {@link resetTranslationRotation}.\n     */\n    resetTranslation(): void {\n        _wl_object_reset_translation(this.objectId);\n    }\n\n    /** Reset local scaling to identity (``[1.0, 1.0, 1.0]``). */\n    resetScaling(): void {\n        _wl_object_reset_scaling(this.objectId);\n    }\n\n    /**\n     * Translate object by a vector in the parent's space.\n     * @param v Vector to translate by.\n     */\n    translate(v: Readonly<NumberArray>): void {\n        _wl_object_translate(this.objectId, v[0], v[1], v[2]);\n    }\n\n    /**\n     * Translate object by a vector in object space.\n     * @param v Vector to translate by.\n     */\n    translateObject(v: Readonly<NumberArray>): void {\n        _wl_object_translate_obj(this.objectId, v[0], v[1], v[2]);\n    }\n\n    /**\n     * Translate object by a vector in world space.\n     * @param v Vector to translate by.\n     */\n    translateWorld(v: Readonly<NumberArray>): void {\n        _wl_object_translate_world(this.objectId, v[0], v[1], v[2]);\n    }\n\n    /**\n     * Rotate around given axis by given angle (degrees) in local space.\n     *\n     * @param a Vector representing the rotation axis.\n     * @param d Angle in degrees.\n     *\n     * @note If the object is translated the rotation will be around\n     *     the parent. To rotate around the object origin, use\n     *     {@link rotateAxisAngleDegObject}\n     *\n     * @see {@link rotateAxisAngleRad}\n     */\n    rotateAxisAngleDeg(a: Readonly<NumberArray>, d: number): void {\n        _wl_object_rotate_axis_angle(this.objectId, a[0], a[1], a[2], d);\n    }\n\n    /**\n     * Rotate around given axis by given angle (radians) in local space.\n     *\n     * @param a Vector representing the rotation axis.\n     * @param d Angle in radians.\n     *\n     * @note If the object is translated the rotation will be around\n     *     the parent. To rotate around the object origin, use\n     *     {@link rotateAxisAngleDegObject}\n     *\n     * @see {@link rotateAxisAngleDeg}\n     */\n    rotateAxisAngleRad(a: Readonly<NumberArray>, d: number): void {\n        _wl_object_rotate_axis_angle_rad(this.objectId, a[0], a[1], a[2], d);\n    }\n\n    /**\n     * Rotate around given axis by given angle (degrees) in object space.\n     *\n     * @param a Vector representing the rotation axis.\n     * @param d Angle in degrees.\n     *\n     * Equivalent to prepending a rotation quaternion to the object's\n     * local transformation.\n     *\n     * @see {@link rotateAxisAngleRadObject}\n     */\n    rotateAxisAngleDegObject(a: Readonly<NumberArray>, d: number): void {\n        _wl_object_rotate_axis_angle_obj(this.objectId, a[0], a[1], a[2], d);\n    }\n\n    /**\n     * Rotate around given axis by given angle (radians) in object space\n     * Equivalent to prepending a rotation quaternion to the object's\n     * local transformation.\n     *\n     * @param a Vector representing the rotation axis\n     * @param d Angle in degrees\n     *\n     * @see {@link rotateAxisAngleDegObject}\n     */\n    rotateAxisAngleRadObject(a: Readonly<NumberArray>, d: number): void {\n        _wl_object_rotate_axis_angle_rad_obj(this.objectId, a[0], a[1], a[2], d);\n    }\n\n    /**\n     * Rotate by a quaternion.\n     *\n     * @param q the Quaternion to rotate by.\n     */\n    rotate(q: Readonly<NumberArray>): void {\n        _wl_object_rotate_quat(this.objectId, q[0], q[1], q[2], q[3]);\n    }\n\n    /**\n     * Rotate by a quaternion in object space.\n     *\n     * Equivalent to prepending a rotation quaternion to the object's\n     * local transformation.\n     *\n     * @param q the Quaternion to rotate by.\n     */\n    rotateObject(q: Readonly<NumberArray>): void {\n        _wl_object_rotate_quat_obj(this.objectId, q[0], q[1], q[2], q[3]);\n    }\n\n    /**\n     * Scale object by a vector in object space.\n     *\n     * @param v Vector to scale by.\n     */\n    scale(v: Readonly<NumberArray>): void {\n        _wl_object_scale(this.objectId, v[0], v[1], v[2]);\n    }\n\n    /** Local / object space transformation. */\n    get transformLocal(): Float32Array {\n        return new Float32Array(HEAPF32.buffer, _wl_object_trans_local(this.objectId), 8);\n    }\n\n    /**\n     * Set local transform.\n     *\n     * @param t Local space transformation.\n     *\n     * @since 0.8.5\n     */\n    set transformLocal(t: Readonly<NumberArray>) {\n        this.transformLocal.set(t);\n        this.setDirty();\n    }\n\n    /**\n     * Compute local / object space translation from transformation.\n     *\n     * @param out Destination array/vector, expected to have at least 3 elements.\n     * @return The `out` parameter.\n     */\n    getTranslationLocal<T extends NumberArray>(out: T): T {\n        _wl_object_get_translation_local(this.objectId, _tempMem);\n        out[0] = _tempMemFloat[0];\n        out[1] = _tempMemFloat[1];\n        out[2] = _tempMemFloat[2];\n        return out;\n    }\n\n    /**\n     * Compute world space translation from transformation.\n     *\n     * May recompute transformations of the hierarchy of this object,\n     * if they were changed by JavaScript components this frame.\n     *\n     * @param out Destination array/vector, expected to have at least 3 elements.\n     * @return The `out` parameter.\n     */\n    getTranslationWorld<T extends NumberArray>(out: T): T {\n        _wl_object_get_translation_world(this.objectId, _tempMem);\n        out[0] = _tempMemFloat[0];\n        out[1] = _tempMemFloat[1];\n        out[2] = _tempMemFloat[2];\n        return out;\n    }\n\n    /**\n     * Set local / object space translation.\n     *\n     * Concatenates a new translation dual quaternion onto the existing rotation.\n     *\n     * @param v New local translation array/vector, expected to have at least 3 elements.\n     */\n    setTranslationLocal(v: Readonly<NumberArray>): void {\n        _wl_object_set_translation_local(this.objectId, v[0], v[1], v[2]);\n    }\n\n    /**\n     * Set world space translation.\n     *\n     * Applies the inverse parent transform with a new translation dual quaternion\n     * which is concatenated onto the existing rotation.\n     *\n     * @param v New world translation array/vector, expected to have at least 3 elements.\n     */\n    setTranslationWorld(v: Readonly<NumberArray>): void {\n        _wl_object_set_translation_world(this.objectId, v[0], v[1], v[2]);\n    }\n\n    /**\n     * Global / world space transformation.\n     *\n     * May recompute transformations of the hierarchy of this object,\n     * if they were changed by JavaScript components this frame.\n     */\n    get transformWorld(): Float32Array {\n        return new Float32Array(HEAPF32.buffer, _wl_object_trans_world(this.objectId), 8);\n    }\n\n    /**\n     * Set world transform.\n     *\n     * @param t Global / world space transformation.\n     *\n     * @since 0.8.5\n     */\n    set transformWorld(t: Readonly<NumberArray>) {\n        this.transformWorld.set(t);\n        _wl_object_trans_world_to_local(this.objectId);\n    }\n\n    /** Local / object space scaling. */\n    get scalingLocal(): Float32Array {\n        return new Float32Array(HEAPF32.buffer, _wl_object_scaling_local(this.objectId), 3);\n    }\n\n    /**\n     * Set local space scaling.\n     *\n     * @param s Global / world space transformation.\n     *\n     * @since 0.8.7\n     */\n    set scalingLocal(s: Readonly<NumberArray>) {\n        this.scalingLocal.set(s);\n        this.setDirty();\n    }\n\n    /**\n     * Global / world space scaling.\n     *\n     * May recompute transformations of the hierarchy of this object,\n     * if they were changed by JavaScript components this frame.\n     */\n    get scalingWorld(): Float32Array {\n        return new Float32Array(HEAPF32.buffer, _wl_object_scaling_world(this.objectId), 3);\n    }\n\n    /**\n     * Set world space scaling.\n     *\n     * @param t Global / world space transformation.\n     *\n     * @since 0.8.7\n     */\n    set scalingWorld(s: Readonly<NumberArray>) {\n        this.scalingWorld.set(s);\n        _wl_object_scaling_world_to_local(this.objectId);\n    }\n\n    /**\n     * Local space rotation.\n     *\n     * @since 0.8.7\n     */\n    get rotationLocal(): Float32Array {\n        return this.transformLocal.subarray(0, 4);\n    }\n\n    /**\n     * Global / world space rotation\n     *\n     * @since 0.8.7\n     */\n    get rotationWorld(): Float32Array {\n        return this.transformWorld.subarray(0, 4);\n    }\n\n    /**\n     * Set local space rotation.\n     *\n     * @param r Local space rotation\n     *\n     * @since 0.8.7\n     */\n    set rotationLocal(r: Readonly<NumberArray>) {\n        _wl_object_set_rotation_local(this.objectId, r[0], r[1], r[2], r[3]);\n    }\n\n    /**\n     * Set world space rotation.\n     *\n     * @param r Global / world space rotation.\n     *\n     * @since 0.8.7\n     */\n    set rotationWorld(r: Readonly<NumberArray>) {\n        _wl_object_set_rotation_world(this.objectId, r[0], r[1], r[2], r[3]);\n    }\n\n    /**\n     * Compute the object's forward facing world space vector.\n     *\n     * The forward vector in object space is along the negative z-axis, i.e.,\n     * `[0, 0, -1]`.\n     *\n     * @param out Destination array/vector, expected to have at least 3 elements.\n     * @return The `out` parameter.\n     */\n    getForward<T extends NumberArray>(out: T): T {\n        out[0] = 0;\n        out[1] = 0;\n        out[2] = -1;\n        this.transformVectorWorld(out);\n        return out;\n    }\n\n    /**\n     * Compute the object's up facing world space vector.\n     *\n     * @param out Destination array/vector, expected to have at least 3 elements.\n     * @return The `out` parameter.\n     */\n    getUp<T extends NumberArray>(out: T): T {\n        out[0] = 0;\n        out[1] = 1;\n        out[2] = 0;\n        this.transformVectorWorld(out);\n        return out;\n    }\n\n    /**\n     * Compute the object's right facing world space vector.\n     *\n     * @param out Destination array/vector, expected to have at least 3 elements.\n     * @return The `out` parameter.\n     */\n    getRight<T extends NumberArray>(out: T): T {\n        out[0] = 1;\n        out[1] = 0;\n        out[2] = 0;\n        this.transformVectorWorld(out);\n        return out;\n    }\n\n    /**\n     * Transform a vector by this object's world transform.\n     *\n     * @param out Out vector\n     * @param v Vector to transform, default `out`\n     * @return The `out` parameter.\n     *\n     * @since 0.8.7\n     */\n    transformVectorWorld<T extends NumberArray>(out: T, v?: NumberArray): T {\n        v = v || out;\n        _tempMemFloat[0] = v[0];\n        _tempMemFloat[1] = v[1];\n        _tempMemFloat[2] = v[2];\n        _wl_object_transformVectorWorld(this.objectId, _tempMem);\n        out[0] = _tempMemFloat[0];\n        out[1] = _tempMemFloat[1];\n        out[2] = _tempMemFloat[2];\n        return out;\n    }\n\n    /**\n     * Transform a vector by this object's local transform.\n     *\n     * @param out Out vector\n     * @param v Vector to transform, default `out`\n     * @return The `out` parameter.\n     *\n     * @since 0.8.7\n     */\n    transformVectorLocal<T extends NumberArray>(out: T, v?: NumberArray): T {\n        v = v || out;\n        _tempMemFloat[0] = v[0];\n        _tempMemFloat[1] = v[1];\n        _tempMemFloat[2] = v[2];\n        _wl_object_transformVectorLocal(this.objectId, _tempMem);\n        out[0] = _tempMemFloat[0];\n        out[1] = _tempMemFloat[1];\n        out[2] = _tempMemFloat[2];\n\n        return out;\n    }\n\n    /**\n     * Transform a point by this object's world transform.\n     *\n     * @param out Out point.\n     * @param p Point to transform, default `out`.\n     * @return The `out` parameter.\n     *\n     * @since 0.8.7\n     */\n    transformPointWorld<T extends NumberArray>(out: T, p?: NumberArray): T {\n        p = p || out;\n        _tempMemFloat[0] = p[0];\n        _tempMemFloat[1] = p[1];\n        _tempMemFloat[2] = p[2];\n        _wl_object_transformPointWorld(this.objectId, _tempMem);\n        out[0] = _tempMemFloat[0];\n        out[1] = _tempMemFloat[1];\n        out[2] = _tempMemFloat[2];\n\n        return out;\n    }\n\n    /**\n     * Transform a point by this object's local transform.\n     *\n     * @param out Out point.\n     * @param p Point to transform, default `out`.\n     * @return The `out` parameter.\n     *\n     * @since 0.8.7\n     */\n    transformPointLocal<T extends NumberArray>(out: T, p?: NumberArray): T {\n        p = p || out;\n        _tempMemFloat[0] = p[0];\n        _tempMemFloat[1] = p[1];\n        _tempMemFloat[2] = p[2];\n        _wl_object_transformPointLocal(this.objectId, _tempMem);\n        out[0] = _tempMemFloat[0];\n        out[1] = _tempMemFloat[1];\n        out[2] = _tempMemFloat[2];\n\n        return out;\n    }\n\n    /**\n     * Transform a vector by this object's inverse world transform.\n     *\n     * @param out Out vector.\n     * @param v Vector to transform, default `out`.\n     * @return The `out` parameter.\n     *\n     * @since 0.8.7\n     */\n    transformVectorInverseWorld<T extends NumberArray>(out: T, v?: NumberArray): T {\n        v = v || out;\n        _tempMemFloat[0] = v[0];\n        _tempMemFloat[1] = v[1];\n        _tempMemFloat[2] = v[2];\n        _wl_object_transformVectorInverseWorld(this.objectId, _tempMem);\n        out[0] = _tempMemFloat[0];\n        out[1] = _tempMemFloat[1];\n        out[2] = _tempMemFloat[2];\n\n        return out;\n    }\n\n    /**\n     * Transform a vector by this object's inverse local transform.\n     *\n     * @param out Out vector\n     * @param v Vector to transform, default `out`\n     * @return The `out` parameter.\n     *\n     * @since 0.8.7\n     */\n    transformVectorInverseLocal<T extends NumberArray>(out: T, v?: NumberArray): T {\n        v = v || out;\n        _tempMemFloat[0] = v[0];\n        _tempMemFloat[1] = v[1];\n        _tempMemFloat[2] = v[2];\n        _wl_object_transformVectorInverseLocal(this.objectId, _tempMem);\n        out[0] = _tempMemFloat[0];\n        out[1] = _tempMemFloat[1];\n        out[2] = _tempMemFloat[2];\n\n        return out;\n    }\n\n    /**\n     * Transform a point by this object's inverse world transform.\n     *\n     * @param out Out point.\n     * @param p Point to transform, default `out`.\n     * @return The `out` parameter.\n     *\n     * @since 0.8.7\n     */\n    transformPointInverseWorld<T extends NumberArray>(out: T, p?: NumberArray): T {\n        p = p || out;\n        _tempMemFloat[0] = p[0];\n        _tempMemFloat[1] = p[1];\n        _tempMemFloat[2] = p[2];\n        _wl_object_transformPointInverseWorld(this.objectId, _tempMem);\n        out[0] = _tempMemFloat[0];\n        out[1] = _tempMemFloat[1];\n        out[2] = _tempMemFloat[2];\n\n        return out;\n    }\n\n    /**\n     * Transform a point by this object's inverse local transform.\n     *\n     * @param out Out point.\n     * @param p Point to transform, default `out`.\n     * @return The `out` parameter.\n     *\n     * @since 0.8.7\n     */\n    transformPointInverseLocal<T extends NumberArray>(out: T, p?: NumberArray): T {\n        p = p || out;\n        _tempMemFloat.set(p);\n        _wl_object_transformPointInverseLocal(this.objectId, _tempMem);\n        out[0] = _tempMemFloat[0];\n        out[1] = _tempMemFloat[1];\n        out[2] = _tempMemFloat[2];\n\n        return out;\n    }\n\n    /**\n     * Transform an object space dual quaternion into world space.\n     *\n     * @param out Out transformation.\n     * @param q Local space transformation, default `out`.\n     * @return The `out` parameter.\n     *\n     * @since 0.8.7\n     */\n    toWorldSpaceTransform<T extends NumberArray>(out: T, q?: NumberArray): T {\n        q = q || out;\n        _tempMemFloat.set(q);\n        _wl_object_toWorldSpaceTransform(this.objectId, _tempMem);\n        out[0] = _tempMemFloat[0];\n        out[1] = _tempMemFloat[1];\n        out[2] = _tempMemFloat[2];\n        out[3] = _tempMemFloat[3];\n\n        out[4] = _tempMemFloat[4];\n        out[5] = _tempMemFloat[5];\n        out[6] = _tempMemFloat[6];\n        out[7] = _tempMemFloat[7];\n\n        return out;\n    }\n\n    /**\n     * Transform a world space dual quaternion into local space.\n     *\n     * @param out Out transformation\n     * @param q World space transformation, default `out`\n     * @return The `out` parameter.\n     *\n     * @since 0.8.7\n     */\n    toLocalSpaceTransform<T extends NumberArray>(out: T, q?: NumberArray): T {\n        const p = this.parent;\n        q = q || out;\n        if (!p) {\n            if (out !== q) {\n                out[0] = q[0];\n                out[1] = q[1];\n                out[2] = q[2];\n                out[3] = q[3];\n                out[4] = q[4];\n                out[5] = q[5];\n                out[6] = q[6];\n                out[7] = q[7];\n            }\n        } else {\n            /* @todo: This is broken. It should use `out`. */\n            p.toObjectSpaceTransform(q as number[]);\n        }\n        return out;\n    }\n\n    /**\n     * Transform a world space dual quaternion into object space.\n     *\n     * @param out Out transformation.\n     * @param q World space transformation, default `out`\n     * @return The `out` parameter.\n     *\n     * @since 0.8.7\n     */\n    toObjectSpaceTransform<T extends NumberArray>(out: T, q?: NumberArray): T {\n        q = q || out;\n        _tempMemFloat.set(q);\n        _wl_object_toObjectSpaceTransform(this.objectId, _tempMem);\n        out[0] = _tempMemFloat[0];\n        out[1] = _tempMemFloat[1];\n        out[2] = _tempMemFloat[2];\n        out[3] = _tempMemFloat[3];\n\n        out[4] = _tempMemFloat[4];\n        out[5] = _tempMemFloat[5];\n        out[6] = _tempMemFloat[6];\n        out[7] = _tempMemFloat[7];\n\n        return out;\n    }\n\n    /**\n     * Turn towards / look at target.\n     *\n     * Rotates the object so that its forward vector faces towards the target\n     * position. The `up` vector acts as a hint to uniquely orient the object's\n     * up direction. When orienting a view component, the projected `up` vector\n     * faces upwards on the viewing plane.\n     *\n     * @param p Target position to turn towards, in world space.\n     * @param up Up vector to align object with, in world space. Default is `[0, 1, 0]`.\n     */\n    lookAt(p: NumberArray, up: NumberArray = UP_VECTOR): void {\n        _wl_object_lookAt(this.objectId, p[0], p[1], p[2], up[0], up[1], up[2]);\n    }\n\n    /** Destroy the object with all of its components and remove it from the scene */\n    destroy(): void {\n        _wl_scene_remove_object(this.objectId);\n        /* @todo: Shouldn't be `null` otherwise the API is unexpected */\n        this.objectId = null!;\n    }\n\n    /**\n     * Mark transformation dirty.\n     *\n     * Causes an eventual recalculation of {@link transformWorld}, either\n     * on next {@link getTranslationWorld}, {@link transformWorld} or\n     * {@link scalingWorld} or the beginning of next frame, whichever\n     * happens first.\n     */\n    setDirty(): void {\n        _wl_object_set_dirty(this.objectId);\n    }\n\n    /**\n     * Disable/enable all components of this object.\n     *\n     * @param b New state for the components.\n     *\n     * @since 0.8.5\n     */\n    set active(b: boolean) {\n        const comps = this.getComponents();\n        for (let c of comps) {\n            c.active = b;\n        }\n    }\n\n    /* `getComponent` overloads for native components. */\n\n    /** @overload */\n    getComponent(type: 'collision', index?: number): CollisionComponent | null;\n    /** @overload */\n    getComponent(type: 'text', index?: number): TextComponent | null;\n    /** @overload */\n    getComponent(type: 'view', index?: number): ViewComponent | null;\n    /** @overload */\n    getComponent(type: 'mesh', index?: number): MeshComponent | null;\n    /** @overload */\n    getComponent(type: 'input', index?: number): InputComponent | null;\n    /** @overload */\n    getComponent(type: 'light', index?: number): LightComponent | null;\n    /** @overload */\n    getComponent(type: 'animation', index?: number): AnimationComponent | null;\n    /** @overload */\n    getComponent(type: 'physx', index?: number): PhysXComponent | null;\n    /** @overload */\n    getComponent(typeOrClass: string, index?: number): Component | null;\n    /** @overload */\n    getComponent<T extends Component>(\n        typeOrClass: ComponentConstructor<T>,\n        index?: number\n    ): T | null;\n\n    /**\n     * Get a component attached to this object.\n     *\n     * @param typeOrClass Type name. It's also possible to give a class definition.\n     *     In this case, the method will use the `class.TypeName` field to find the component.\n     * @param index=0 Index for component of given type. This can be used to access specific\n     *      components if the object has multiple components of the same type.\n     * @returns The component or `null` if there is no such component on this object\n     */\n    getComponent(\n        typeOrClass: string | ComponentConstructor,\n        index?: number\n    ): Component | null {\n        const type = isString(typeOrClass)\n            ? (typeOrClass as string)\n            : (typeOrClass as ComponentConstructor).TypeName;\n        const lengthBytes = lengthBytesUTF8(type) + 1;\n        const mem = _malloc(lengthBytes);\n        stringToUTF8(type, mem, lengthBytes);\n        const componentType = _wl_get_component_manager_index(mem);\n        _free(mem);\n\n        if (componentType < 0) {\n            /* Not a native component, try js: */\n            const typeIndex = _WL._componentTypeIndices[type];\n            const jsIndex = _wl_get_js_component_index(\n                this.objectId,\n                typeIndex,\n                index || 0\n            );\n            return jsIndex < 0 ? null : _WL._components[jsIndex];\n        }\n\n        const componentId = _wl_get_component_id(this.objectId, componentType, index || 0);\n        return _wrapComponent(type, componentType, componentId);\n    }\n\n    /**\n     * @param typeOrClass Type name, pass a falsey value (`undefined` or `null`) to retrieve all.\n     *     It's also possible to give a class definition. In this case, the method will use the `class.TypeName` field to\n     *     find the components.\n     * @returns All components of given type attached to this object.\n     *\n     * @note As this function is non-trivial, avoid using it in `update()` repeatedly,\n     *      but rather store its result in `init()` or `start()`\n     * @warning This method will currently return at most 341 components.\n     */\n    getComponents<T extends Component>(\n        typeOrClass?: string | ComponentConstructor<T> | null\n    ): T[] {\n        let componentType = null;\n        let type = null;\n        if (typeOrClass) {\n            type = isString(typeOrClass)\n                ? (typeOrClass as string)\n                : (typeOrClass as ComponentConstructor<T>).TypeName;\n            componentType = $Object._typeIndexFor(type);\n        }\n        const components = [];\n        const maxComps = Math.floor((_tempMemSize / 3) * 2);\n        const componentsCount = _wl_object_get_components(\n            this.objectId,\n            _tempMem,\n            maxComps\n        );\n        const offset = 2 * componentsCount;\n        _wl_object_get_component_types(this.objectId, _tempMem + offset, maxComps);\n\n        const jsManagerIndex = $Object._typeIndexFor('js');\n        for (let i = 0; i < componentsCount; ++i) {\n            const t = _tempMemUint8[i + offset];\n            const componentId = _tempMemUint16[i];\n            /* Handle JS types separately */\n            if (t == jsManagerIndex) {\n                const comp =\n                    _WL._components[_wl_get_js_component_index_for_id(componentId)];\n                if (componentType === null || comp.type == type) components.push(comp);\n                continue;\n            }\n\n            if (componentType === null) {\n                const managerName = $Object._typeNameFor(t);\n                components.push(_wrapComponent(managerName, t, componentId));\n            } else if (t == componentType) {\n                /* Optimized manager name retrieval, already have type */\n                components.push(_wrapComponent(type as string, componentType, componentId));\n            }\n        }\n        return components;\n    }\n\n    /* `addComponent` overloads for native components. */\n\n    /** @overload */\n    addComponent(\n        type: 'collision',\n        params?: Record<string, any>\n    ): CollisionComponent | null;\n    /** @overload */\n    addComponent(type: 'text', params?: Record<string, any>): TextComponent | null;\n    /** @overload */\n    addComponent(type: 'view', params?: Record<string, any>): ViewComponent | null;\n    /** @overload */\n    addComponent(type: 'mesh', params?: Record<string, any>): MeshComponent | null;\n    /** @overload */\n    addComponent(type: 'input', params?: Record<string, any>): InputComponent | null;\n    /** @overload */\n    addComponent(type: 'light', params?: Record<string, any>): LightComponent | null;\n    /** @overload */\n    addComponent(\n        type: 'animation',\n        params?: Record<string, any>\n    ): AnimationComponent | null;\n    /** @overload */\n    addComponent(type: 'physx', params?: Record<string, any>): PhysXComponent | null;\n    /** @overload */\n    addComponent<T extends Component>(\n        typeClass: ComponentConstructor<T>,\n        params?: Record<string, any>\n    ): T | null;\n    /**\n     * Add component of given type to the object.\n     *\n     * You can use this function to clone components, see the example below.\n     *\n     * ```js\n     *  // Clone existing component (since 0.8.10)\n     *  let original = this.object.getComponent('mesh');\n     *  otherObject.addComponent('mesh', original);\n     *  // Create component from parameters\n     *  this.object.addComponent('mesh', {\n     *      mesh: someMesh,\n     *      material: someMaterial,\n     *  });\n     * ```\n     *\n     * @param typeOrClass Typename to create a component of. Can be native or\n     *     custom JavaScript component type. It's also possible to give a class definition.\n     *     In this case, the method will use the `class.TypeName` field.\n     * @param params Parameters to initialize properties of the new component,\n     *      can be another component to copy properties from.\n     *\n     * @returns The component or `null` if the type was not found\n     */\n    addComponent(\n        typeOrClass: ComponentConstructor | string,\n        params?: Record<string, any>\n    ): Component | null {\n        const type = isString(typeOrClass)\n            ? (typeOrClass as string)\n            : (typeOrClass as ComponentConstructor).TypeName;\n        const componentType = $Object._typeIndexFor(type);\n        let component = null;\n        let componentIndex = null;\n        if (componentType < 0) {\n            /* JavaScript component */\n            if (!(type in _WL._componentTypeIndices)) {\n                throw new TypeError(\"Unknown component type '\" + type + \"'\");\n            }\n            const componentId = _wl_object_add_js_component(\n                this.objectId,\n                _WL._componentTypeIndices[type]\n            );\n            componentIndex = _wl_get_js_component_index_for_id(componentId);\n            component = _WL._components[componentIndex];\n        } else {\n            /* native component */\n            const componentId = _wl_object_add_component(this.objectId, componentType);\n            component = _wrapComponent(type, componentType, componentId);\n        }\n\n        if (params !== undefined) {\n            for (const key in params) {\n                /* active will be set later, other properties should be skipped if\n                 * passing a component for cloning. */\n                if (EXCLUDED_COMPONENT_PROPERTIES.includes(key)) continue;\n                component[key] = params[key];\n            }\n        }\n\n        /* Explicitly initialize native components */\n        if (componentType < 0) {\n            /* @todo: `componentIndex` can be null here, that's an error */\n            _wljs_component_init(componentIndex!);\n            /* start() is called through onActivate() */\n        }\n\n        /* If it was not explicitly requested by the user to leave the component inactive,\n         * we activate it as a final step. This invalidates componentIndex! */\n        if (!params || !('active' in params && !params.active)) {\n            component.active = true;\n        }\n\n        return component;\n    }\n\n    /**\n     * Whether given object's transformation has changed.\n     */\n    get changed(): boolean {\n        return !!_wl_object_is_changed(this.objectId);\n    }\n\n    /**\n     * Checks equality by comparing whether the wrapped native component ids\n     * and component manager types are equal.\n     *\n     * @param otherObject Object to check equality with.\n     * @returns Whether this object equals the given object.\n     */\n    equals(otherObject?: $Object): boolean {\n        if (!otherObject) return false;\n        return this.objectId == otherObject.objectId;\n    }\n\n    /**\n     * Used internally.\n     *\n     * @param type The type\n     * @return The component type\n     */\n    static _typeIndexFor(type: string): number {\n        const lengthBytes = lengthBytesUTF8(type) + 1;\n        const mem = _malloc(lengthBytes);\n        stringToUTF8(type, mem, lengthBytes);\n        const componentType = _wl_get_component_manager_index(mem);\n        _free(mem);\n\n        return componentType;\n    }\n\n    /**\n     * Used internally.\n     *\n     * @param typeIndex The type index\n     * @return The name as a string\n     */\n    static _typeNameFor(typeIndex: number) {\n        return UTF8ToString(_wl_component_manager_name(typeIndex));\n    }\n}\n\n/**\n * Wrapper around a native skin data.\n */\nexport class Skin {\n    /**\n     * Index of the skin in the manager.\n     * @hidden\n     */\n    public _index: number;\n\n    constructor(index: number) {\n        this._index = index;\n    }\n\n    /** Amount of joints in this skin. */\n    get jointCount() {\n        return _wl_skin_get_joint_count(this._index);\n    }\n\n    /** Joints object ids for this skin */\n    get jointIds(): Uint16Array {\n        return new Uint16Array(\n            HEAPU16.buffer,\n            _wl_skin_joint_ids(this._index),\n            this.jointCount\n        );\n    }\n\n    /**\n     * Dual quaternions in a flat array of size 8 times {@link jointCount}.\n     *\n     * Inverse bind transforms of the skin.\n     */\n    get inverseBindTransforms(): Float32Array {\n        return new Float32Array(\n            HEAPF32.buffer,\n            _wl_skin_inverse_bind_transforms(this._index),\n            8 * this.jointCount\n        );\n    }\n\n    /**\n     * Vectors in a flat array of size 3 times {@link jointCount}.\n     *\n     * Inverse bind scalings of the skin.\n     */\n    get inverseBindScalings(): Float32Array {\n        return new Float32Array(\n            HEAPF32.buffer,\n            _wl_skin_inverse_bind_scalings(this._index),\n            3 * this.jointCount\n        );\n    }\n}\n\n/* Unfortunately, the name \"Object\" is reserved, so internally we\n * use $Object, while we expose WL.Object as previously. */\nexport {$Object as Object};\n\n/**\n * Ray hit.\n *\n * Result of a {@link Scene.rayCast}.\n *\n * @note this class wraps internal engine data and should only be created internally.\n */\nexport class RayHit {\n    /** Pointer to the memory heap. */\n    private _ptr: number;\n\n    /**\n     * @param ptr Pointer to the ray hits memory.\n     */\n    constructor(ptr: number) {\n        assert((ptr & 3) == 0, MISALIGNED_MSG);\n        this._ptr = ptr;\n    }\n\n    /** Array of ray hit locations. */\n    get locations(): Float32Array[] {\n        let p = this._ptr;\n        let l = [];\n        for (let i = 0; i < this.hitCount; ++i) {\n            l.push(new Float32Array(HEAPF32.buffer, p + 12 * i, 3));\n        }\n        return l;\n    }\n\n    /** Array of ray hit normals (only when using {@link Physics#rayCast}. */\n    get normals(): Float32Array[] {\n        let p = this._ptr + 48;\n        let l = [];\n        for (let i = 0; i < this.hitCount; ++i) {\n            l.push(new Float32Array(HEAPF32.buffer, p + 12 * i, 3));\n        }\n        return l;\n    }\n\n    /**\n     * Prefer these to recalculating the distance from locations.\n     *\n     * Distances of array hits to ray origin.\n     */\n    get distances(): Float32Array {\n        const p = this._ptr + 48 * 2;\n        return new Float32Array(HEAPF32.buffer, p, this.hitCount);\n    }\n\n    /** Hit objects */\n    get objects(): ($Object | null)[] {\n        let p = this._ptr + (48 * 2 + 16);\n        let objIds = new Uint16Array(HEAPU16.buffer, p, this.hitCount);\n        return [\n            objIds[0] <= 0 ? null : _wrapObject(objIds[0]),\n            objIds[1] <= 0 ? null : _wrapObject(objIds[1]),\n            objIds[2] <= 0 ? null : _wrapObject(objIds[2]),\n            objIds[3] <= 0 ? null : _wrapObject(objIds[3]),\n        ];\n    }\n\n    /** Number of hits (max 4) */\n    get hitCount(): number {\n        return Math.min(HEAPU32[this._ptr / 4 + 30], 4);\n    }\n}\n\nclass math {\n    /** (Experimental!) Cubic Hermite spline interpolation for vector3 and quaternions.\n     *\n     * With `f == 0`, `out` will be `b`, if `f == 1`, `out` will be c.\n     *\n     * Whether a quaternion or vector3 interpolation is intended is determined by\n     * length of `a`.\n     *\n     * @param out Array to write result to.\n     * @param a First tangent/handle.\n     * @param b First point or quaternion.\n     * @param c Second point or quaternion.\n     * @param d Second handle.\n     * @param f Interpolation factor in [0; 1].\n     * @returns The `out` parameter.\n     *\n     * @since 0.8.6\n     */\n    static cubicHermite<T extends NumberArray>(\n        out: T,\n        a: Readonly<NumberArray>,\n        b: Readonly<NumberArray>,\n        c: Readonly<NumberArray>,\n        d: Readonly<NumberArray>,\n        f: number\n    ) {\n        _tempMemFloat.subarray(0).set(a);\n        _tempMemFloat.subarray(4).set(b);\n        _tempMemFloat.subarray(8).set(c);\n        _tempMemFloat.subarray(12).set(d);\n\n        const isQuat = a.length == 4;\n\n        _wl_math_cubicHermite(\n            _tempMem + 4 * 16,\n            _tempMem + 4 * 0,\n            _tempMem + 4 * 4,\n            _tempMem + 4 * 8,\n            _tempMem + 4 * 12,\n            f,\n            isQuat\n        );\n        out[0] = _tempMemFloat[16];\n        out[1] = _tempMemFloat[17];\n        out[2] = _tempMemFloat[18];\n        if (isQuat) out[3] = _tempMemFloat[19];\n        return out;\n    }\n}\n\nexport {math};\n\n/**\n * Check if a given value is a native string or a `String` instance.\n *\n * @param value The value to check.\n * @returns `true` if the `value` has type string literal or `String`, `false` otherwise.\n */\nexport function isString(value: unknown) {\n    return value && (typeof value === 'string' || value.constructor === String);\n}\n\n/**\n * @param objectId Object ID to wrap\n *\n * @returns Wrapped object\n * @note This is used for internal purposes\n *\n * @hidden\n */\nexport function _wrapObject(objectId: number): $Object {\n    const o = ObjectCache[objectId] || (ObjectCache[objectId] = new $Object(objectId));\n    o.objectId = objectId;\n    return o;\n}\n\n/**\n * Retrieves a component instance if it exists, or create and cache\n * a new one.\n *\n * @param type component type name\n * @param componentType Component manager index\n * @param componentId Component id in the manager\n *\n * @returns JavaScript instance wrapping the native component\n *\n * @hidden\n */\nexport function _wrapComponent(type: string, componentType: number, componentId: number) {\n    if (componentId < 0) return null;\n\n    /* @todo: extremely slow in JS to do that... Better to use a Map or allocate the array. */\n    const c = ComponentCache[componentType] || (ComponentCache[componentType] = []);\n    if (c[componentId]) {\n        return c[componentId];\n    }\n\n    let component;\n    if (type == 'collision') {\n        component = new CollisionComponent(componentType, componentId);\n    } else if (type == 'text') {\n        component = new TextComponent(componentType, componentId);\n    } else if (type == 'view') {\n        component = new ViewComponent(componentType, componentId);\n    } else if (type == 'mesh') {\n        component = new MeshComponent(componentType, componentId);\n    } else if (type == 'input') {\n        component = new InputComponent(componentType, componentId);\n    } else if (type == 'light') {\n        component = new LightComponent(componentType, componentId);\n    } else if (type == 'animation') {\n        component = new AnimationComponent(componentType, componentId);\n    } else if (type == 'physx') {\n        component = new PhysXComponent(componentType, componentId);\n    } else {\n        const typeIndex = _WL._componentTypeIndices[type];\n        const constructor = _WL._componentTypes[typeIndex];\n        component = new constructor();\n    }\n    /* Sets the manager and identifier from the outside, to\n     * simplify the user's constructor. */\n    component._manager = componentType;\n    component._id = componentId;\n    c[componentId] = component;\n    return component;\n}\n"],
  "mappings": "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",
  "names": []
}
